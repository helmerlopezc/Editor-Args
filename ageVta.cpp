
#include "ageVta.h"
#include <math.h>

#include <qvariant.h>
#include <qpushbutton.h>
#include <qframe.h>
#include <qprogressbar.h>
#include <qgroupbox.h>
#include <qlabel.h>
#include <qlineedit.h>
#include <qcombobox.h>
#include <qheader.h>
#include <qlistview.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qimage.h>
#include <qpixmap.h>

#include "comisAgen.h"
#include <stdlib.h>

#include <qtextcodec.h>

#include <qfiledialog.h>
#include "datosIni.h"
#include <qdir.h>
#include "bscEmp.h"

static const unsigned char image0_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x00,
    0x23, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x63, 0xfc, 0xff, 0xff, 0x3f,
    0x03, 0x2d, 0x00, 0x13, 0x4d, 0x4c, 0x1d, 0x35, 0x78, 0xd4, 0xe0, 0x51,
    0x83, 0x47, 0x0d, 0x1e, 0x35, 0x78, 0xd4, 0xe0, 0x11, 0x64, 0x30, 0x00,
    0x86, 0x57, 0x03, 0x29, 0xbf, 0x98, 0x6f, 0x65, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x57, 0x02, 0xf9, 0x87, 0x00, 0x00, 0x0a,
    0x04, 0x49, 0x44, 0x41, 0x54, 0x68, 0x81, 0xed, 0x98, 0x5f, 0x8c, 0x1c,
    0x47, 0x9d, 0xc7, 0x3f, 0x31, 0xbd, 0x50, 0x13, 0xcd, 0x92, 0x1a, 0x18,
    0x73, 0xdd, 0xba, 0xb5, 0x3c, 0x15, 0xc5, 0x40, 0x6f, 0xe2, 0xc4, 0x33,
    0xa7, 0xdc, 0x65, 0x37, 0x36, 0x84, 0x11, 0x87, 0xc8, 0x42, 0x14, 0x67,
    0x9d, 0x80, 0x92, 0x20, 0x30, 0x2c, 0x3c, 0x9c, 0xfc, 0x90, 0x70, 0xce,
    0x49, 0x39, 0xf9, 0xfe, 0x45, 0x97, 0xe8, 0x04, 0x97, 0x08, 0x5b, 0x22,
    0x48, 0xf7, 0x10, 0x8c, 0x38, 0x92, 0x07, 0x10, 0x51, 0x10, 0xf2, 0x22,
    0x11, 0x69, 0xec, 0xc8, 0x30, 0x13, 0xc5, 0x61, 0xda, 0x64, 0xa3, 0x29,
    0xc3, 0x2e, 0xdb, 0x13, 0x3c, 0x4a, 0xf7, 0xc5, 0x2d, 0x4f, 0xdb, 0xb4,
    0x76, 0x8a, 0x75, 0x5f, 0xe6, 0x1e, 0x7a, 0x6c, 0x67, 0xcf, 0xd9, 0xf5,
    0x3a, 0x9b, 0xbc, 0xed, 0x57, 0x1a, 0xf5, 0xb4, 0xba, 0xbb, 0xea, 0xfb,
    0xfd, 0xfe, 0xaa, 0x7e, 0xf5, 0xab, 0x82, 0x75, 0xac, 0x63, 0x1d, 0xeb,
    0x58, 0xc7, 0x3a, 0xde, 0x3d, 0x5c, 0x03, 0x62, 0x37, 0xf0, 0x1d, 0xe0,
    0x70, 0xf6, 0x13, 0x87, 0x2f, 0xfe, 0xe7, 0xe0, 0xe0, 0xf9, 0xe6, 0xbd,
    0x3b, 0xf7, 0xf1, 0xdd, 0x27, 0x7f, 0x44, 0x7f, 0xb1, 0x4f, 0x7f, 0xa1,
    0x4f, 0xbf, 0x3f, 0xb8, 0x2e, 0xf6, 0x99, 0xaf, 0x2d, 0xb0, 0xef, 0xef,
    0xbe, 0x8b, 0x10, 0xe2, 0xb2, 0x1d, 0x5e, 0xf5, 0x2e, 0x11, 0xff, 0x24,
    0xf0, 0xa0, 0xb4, 0x4b, 0x3b, 0xd5, 0x0d, 0x55, 0x1c, 0x35, 0x89, 0xc8,
    0x87, 0x48, 0x59, 0xc5, 0xa4, 0x3e, 0x02, 0x45, 0x98, 0xd4, 0x21, 0x91,
    0x04, 0xfe, 0x34, 0xfe, 0x89, 0xc3, 0xc4, 0x1d, 0x7d, 0x1c, 0x38, 0x20,
    0xf2, 0xf2, 0x07, 0xd5, 0xed, 0xe3, 0x4c, 0xdc, 0x3e, 0xc1, 0x9e, 0x7b,
    0xf7, 0x80, 0x04, 0x86, 0x20, 0x08, 0xba, 0x04, 0x27, 0x0c, 0x5f, 0xff,
    0xfb, 0x5d, 0x78, 0xc7, 0x1b, 0xef, 0x99, 0x80, 0x9b, 0x80, 0xfd, 0xe5,
    0x5b, 0x26, 0x6f, 0x9b, 0xbc, 0x6b, 0x1f, 0x01, 0x0e, 0xaa, 0x08, 0x7e,
    0xe2, 0xa3, 0xa4, 0x42, 0x47, 0xa0, 0x24, 0xf8, 0x91, 0x46, 0x49, 0x17,
    0x1d, 0x19, 0x54, 0x1e, 0x74, 0xd8, 0xc2, 0xb6, 0x1c, 0xa6, 0x9f, 0x7f,
    0x82, 0xf0, 0xf8, 0xf4, 0x6b, 0xc6, 0xc4, 0x5f, 0x01, 0x5e, 0x00, 0x28,
    0x95, 0x4a, 0x54, 0x77, 0x54, 0x99, 0xfc, 0xf4, 0x24, 0x15, 0x55, 0xa1,
    0x9b, 0x76, 0xb9, 0xbe, 0x7a, 0xfd, 0x7b, 0x22, 0xe0, 0x01, 0xbb, 0x54,
    0xde, 0x5f, 0xbd, 0x6b, 0x0f, 0x72, 0x64, 0x02, 0xf0, 0xa9, 0x48, 0x17,
    0xb1, 0x29, 0x66, 0xbc, 0xa4, 0x68, 0x86, 0x3e, 0x2a, 0xaf, 0xf0, 0xc2,
    0x16, 0x2a, 0xaf, 0xd0, 0xa1, 0xc6, 0x3e, 0xa7, 0x68, 0xc4, 0x9a, 0x20,
    0x76, 0x30, 0xa6, 0x05, 0x8c, 0xd2, 0x0d, 0xeb, 0xe8, 0xe7, 0x9f, 0x20,
    0x6c, 0x7b, 0xfb, 0x81, 0x6f, 0x5e, 0x29, 0x89, 0x77, 0x2a, 0xe0, 0x60,
    0x79, 0xfb, 0xde, 0xdd, 0x63, 0x77, 0x4c, 0x30, 0x6a, 0xbb, 0x74, 0x11,
    0x4c, 0xde, 0x5c, 0xc0, 0x00, 0xae, 0x0d, 0x26, 0x04, 0x23, 0xa0, 0xd9,
    0x01, 0x27, 0x0f, 0xba, 0xd3, 0xc3, 0xc9, 0x43, 0xf3, 0xa4, 0x87, 0x93,
    0x53, 0xd4, 0x74, 0x1d, 0xd7, 0x76, 0xd1, 0xb1, 0x4f, 0xc1, 0x1a, 0x45,
    0x77, 0x5a, 0xb4, 0x8e, 0x36, 0x68, 0xbf, 0xfc, 0xd8, 0x11, 0x60, 0x27,
    0x70, 0x66, 0xb5, 0x44, 0xde, 0xf7, 0xce, 0xc8, 0x4f, 0xee, 0xae, 0xde,
    0x33, 0xc5, 0xb0, 0xdc, 0xca, 0xd6, 0x8f, 0x25, 0xdc, 0x7f, 0xab, 0xc3,
    0x9f, 0xe9, 0x31, 0xfa, 0x91, 0x21, 0x66, 0x5e, 0xef, 0x72, 0x95, 0x95,
    0xe3, 0xa5, 0x79, 0x9f, 0x61, 0x4b, 0x50, 0xff, 0xc3, 0x0c, 0x1b, 0xcf,
    0x0e, 0xd3, 0x08, 0x67, 0x88, 0xcf, 0x3a, 0x78, 0xf3, 0xbf, 0xe4, 0x64,
    0x28, 0x98, 0x99, 0x3f, 0xca, 0xc6, 0x0f, 0x56, 0x88, 0x17, 0x7d, 0x40,
    0x21, 0xfe, 0x22, 0x4f, 0xee, 0x83, 0x4e, 0x29, 0x9a, 0x6f, 0x7c, 0x16,
    0xf8, 0xaf, 0xf7, 0x4a, 0xc0, 0x03, 0xe5, 0xed, 0x7b, 0x1f, 0xae, 0xde,
    0x33, 0x45, 0x79, 0x93, 0xcb, 0x9d, 0x6e, 0x81, 0xbf, 0xbe, 0xb9, 0xc0,
    0x50, 0x02, 0x85, 0xfc, 0x10, 0x41, 0x1b, 0xd2, 0x0d, 0x39, 0x8e, 0xfd,
    0x1e, 0xf2, 0x08, 0x8e, 0xfd, 0xc1, 0xb0, 0xf1, 0xfd, 0x05, 0xea, 0xa1,
    0x87, 0xb3, 0x61, 0x13, 0xb3, 0x7f, 0xac, 0x21, 0x91, 0xfc, 0xf8, 0x1f,
    0x76, 0x51, 0xbe, 0x7e, 0x2b, 0x3f, 0xff, 0xd5, 0x2f, 0x28, 0x8f, 0x94,
    0x09, 0x8d, 0xcf, 0x68, 0x51, 0xf1, 0xa7, 0x0f, 0x48, 0x72, 0x1b, 0x94,
    0x1d, 0x75, 0x8e, 0x96, 0x80, 0x9f, 0xbd, 0xdb, 0x02, 0x6e, 0xb2, 0x4b,
    0xe5, 0xe7, 0x3e, 0xf3, 0xc5, 0xaf, 0x31, 0xfc, 0xa1, 0x0a, 0x37, 0xba,
    0x86, 0x4a, 0x79, 0x98, 0xe0, 0x54, 0x8f, 0x61, 0x6b, 0x88, 0xfa, 0x7c,
    0x80, 0x79, 0x73, 0x98, 0xa3, 0x27, 0x5a, 0x74, 0xbb, 0x16, 0x73, 0xe1,
    0x0c, 0x1b, 0x93, 0x61, 0x5e, 0x7a, 0x63, 0x86, 0x24, 0xb1, 0x69, 0x77,
    0x8e, 0x72, 0x32, 0x16, 0x4c, 0xdd, 0xbb, 0x85, 0x8f, 0x6e, 0x75, 0x70,
    0xfe, 0x32, 0x47, 0xfd, 0x37, 0x29, 0x73, 0xa1, 0x87, 0xd8, 0xb0, 0x95,
    0x4e, 0xe2, 0x33, 0x64, 0x29, 0xc4, 0x87, 0x2d, 0xe2, 0x70, 0x76, 0x9b,
    0x39, 0x1b, 0x1e, 0x07, 0x7e, 0x77, 0x39, 0x52, 0x1b, 0xae, 0x40, 0xc0,
    0xfe, 0xea, 0x1d, 0x7b, 0x18, 0x1d, 0xa9, 0x30, 0xe6, 0x16, 0xa8, 0x96,
    0x1d, 0x38, 0x05, 0x8e, 0x95, 0x23, 0x98, 0x03, 0x91, 0x3a, 0x34, 0x74,
    0x0b, 0x89, 0x43, 0x18, 0x1b, 0xa4, 0x50, 0x34, 0x8d, 0x46, 0xe5, 0x15,
    0x26, 0xf1, 0xe8, 0x5a, 0x92, 0xc9, 0x4f, 0x3b, 0x7c, 0x6e, 0x47, 0xe5,
    0x42, 0x83, 0x4f, 0x7e, 0x75, 0x1c, 0x99, 0x4a, 0x48, 0x35, 0xae, 0x54,
    0xd9, 0xd5, 0x76, 0x71, 0xff, 0x76, 0x0f, 0x42, 0xda, 0x07, 0x80, 0x6b,
    0x2e, 0x47, 0x6a, 0xb5, 0x11, 0xb8, 0xd3, 0xbd, 0x65, 0xe2, 0x61, 0xf7,
    0x6f, 0xf6, 0x92, 0x8a, 0x80, 0xaf, 0xec, 0x70, 0x88, 0x92, 0xcc, 0xf9,
    0xda, 0x5c, 0x40, 0xca, 0x30, 0x35, 0xdd, 0x24, 0x3a, 0xbb, 0x89, 0xd9,
    0x37, 0x34, 0xe9, 0x62, 0x81, 0xf0, 0xb4, 0xc6, 0x2c, 0x2a, 0x3a, 0xa7,
    0x9b, 0x98, 0x85, 0x3c, 0x43, 0xd6, 0x2c, 0x4f, 0x3e, 0x7c, 0xff, 0xd2,
    0x56, 0xaf, 0x81, 0x28, 0x89, 0xf1, 0x5a, 0x29, 0x49, 0x1a, 0x92, 0xa6,
    0x8a, 0x60, 0x61, 0x96, 0xe1, 0xab, 0x5d, 0x7a, 0x26, 0x94, 0x71, 0x67,
    0xe6, 0x7f, 0x80, 0x17, 0x57, 0x22, 0xb6, 0xda, 0x08, 0x3c, 0x38, 0x79,
    0xc7, 0x3e, 0xb0, 0xe0, 0xbe, 0xb1, 0x0a, 0xb9, 0x04, 0x1c, 0x91, 0x23,
    0x68, 0x83, 0xc4, 0xa1, 0x36, 0xdb, 0xc2, 0xb1, 0x14, 0xdd, 0xc4, 0x64,
    0x8e, 0xa7, 0x1a, 0x25, 0x15, 0xa4, 0x2d, 0x54, 0xde, 0xa1, 0x9b, 0x78,
    0x1c, 0x7a, 0xec, 0xa1, 0xb7, 0x6d, 0x78, 0xea, 0x9e, 0x71, 0x64, 0x31,
    0x44, 0x49, 0x07, 0x81, 0x8f, 0x2b, 0x5d, 0x7a, 0xf8, 0x54, 0xc7, 0xa6,
    0x00, 0x1e, 0xb8, 0x1c, 0xb1, 0xd5, 0x08, 0xd8, 0x6c, 0x97, 0xdc, 0xdb,
    0x02, 0x0c, 0x15, 0x29, 0x88, 0xd3, 0x00, 0x24, 0xd4, 0xe7, 0x02, 0x82,
    0x14, 0x6a, 0xb3, 0x2d, 0xe2, 0xd8, 0xa1, 0xde, 0xd1, 0x90, 0x82, 0x17,
    0x6a, 0x4c, 0xaa, 0xd0, 0x61, 0x0b, 0x63, 0x1c, 0x9a, 0xed, 0x1a, 0x8f,
    0x7e, 0x63, 0x0a, 0x86, 0x97, 0xef, 0xe0, 0xe9, 0x7f, 0x9c, 0xa2, 0xd9,
    0xa9, 0x03, 0x8a, 0x76, 0xa4, 0xc9, 0xa1, 0xd0, 0x49, 0x80, 0x5d, 0x1a,
    0x2b, 0x91, 0x2d, 0x96, 0x6b, 0x11, 0x20, 0x3e, 0xe5, 0x5c, 0x37, 0x86,
    0x6b, 0xbb, 0x08, 0x55, 0xa0, 0x3c, 0xe2, 0xd0, 0xed, 0x80, 0xb4, 0x1c,
    0x1a, 0xed, 0x16, 0xce, 0x90, 0x83, 0x39, 0xef, 0xbc, 0xd1, 0xb8, 0xd2,
    0x85, 0x14, 0x94, 0x54, 0x18, 0xd3, 0xa0, 0x52, 0x2a, 0x53, 0xbd, 0xc5,
    0x59, 0xb1, 0x87, 0x6e, 0x07, 0x5c, 0xe9, 0x62, 0xd0, 0x94, 0xa4, 0xa2,
    0x67, 0x7c, 0x84, 0xed, 0x52, 0x28, 0x95, 0x01, 0x71, 0xd7, 0x1a, 0x05,
    0x98, 0x9b, 0x9c, 0x4d, 0x93, 0xe8, 0x58, 0x53, 0x1e, 0x01, 0x1d, 0x06,
    0xc4, 0x16, 0x34, 0xe6, 0x5a, 0x74, 0xbb, 0x0e, 0x9e, 0xaf, 0xe9, 0x99,
    0x81, 0xf3, 0x28, 0x74, 0x94, 0x45, 0x42, 0x87, 0x1e, 0x5d, 0xd3, 0xe5,
    0xbe, 0x7b, 0x2b, 0x90, 0x5b, 0xbe, 0xf5, 0x43, 0x47, 0x5b, 0xec, 0xfa,
    0xcf, 0x9f, 0x12, 0x13, 0x23, 0x70, 0xd1, 0xa1, 0x06, 0x14, 0xc4, 0x1a,
    0x21, 0x1d, 0xc0, 0x7c, 0x72, 0x8d, 0x02, 0xd8, 0x26, 0xf2, 0x31, 0xae,
    0x74, 0xd1, 0x21, 0x38, 0xc2, 0xa1, 0xde, 0x06, 0xdb, 0x52, 0x04, 0x51,
    0x4c, 0x33, 0xea, 0x12, 0x9b, 0xe6, 0x20, 0x8b, 0x0c, 0x9c, 0x4f, 0x9b,
    0xd8, 0x42, 0x32, 0xbe, 0xcd, 0xa5, 0xe2, 0x2e, 0xef, 0xfe, 0xe3, 0x3f,
    0xf4, 0x79, 0xe2, 0xe7, 0x1a, 0xa7, 0x08, 0x4e, 0xbe, 0x8c, 0x31, 0x3e,
    0x9c, 0xcf, 0x46, 0x45, 0x17, 0x91, 0x73, 0x00, 0x4a, 0x2b, 0x91, 0xb3,
    0x56, 0x21, 0x00, 0x21, 0xc7, 0xd1, 0x91, 0xa6, 0xba, 0xd5, 0xa1, 0xde,
    0xf6, 0x71, 0xb0, 0xa9, 0xf9, 0x0d, 0xc2, 0x10, 0x1c, 0xd1, 0xc6, 0xef,
    0xf4, 0x20, 0x35, 0x60, 0x55, 0xd0, 0x61, 0x13, 0x4c, 0x81, 0x46, 0x5c,
    0xa7, 0xf9, 0xed, 0x7f, 0x5a, 0xb6, 0xcd, 0x47, 0xbf, 0x77, 0x88, 0xc6,
    0xab, 0x59, 0xb1, 0x17, 0x1b, 0x97, 0x66, 0x27, 0x73, 0xde, 0x44, 0x1e,
    0x42, 0xb8, 0x59, 0x24, 0x51, 0x97, 0x15, 0xb0, 0x9a, 0x39, 0x00, 0x80,
    0x92, 0x2e, 0x5e, 0x94, 0x15, 0x66, 0xcd, 0x93, 0x31, 0x12, 0x9b, 0x20,
    0xae, 0xf3, 0xf4, 0xb7, 0xf7, 0xb0, 0xf7, 0xde, 0x29, 0x24, 0x02, 0xd2,
    0x26, 0x6e, 0x5e, 0xd1, 0x4d, 0x9a, 0x3c, 0xfe, 0x8d, 0xa9, 0x15, 0xc9,
    0xc7, 0x61, 0x0e, 0xdb, 0xce, 0xe1, 0xe4, 0xdd, 0xc1, 0xdc, 0xb9, 0xe8,
    0x3c, 0xa9, 0x0f, 0x83, 0x39, 0x71, 0xbe, 0xff, 0x35, 0x08, 0x30, 0xd9,
    0x98, 0x8e, 0x34, 0xb6, 0x50, 0x78, 0xed, 0x26, 0x85, 0xc4, 0xd0, 0x98,
    0x3b, 0x4c, 0xf9, 0xba, 0x2a, 0x00, 0xbb, 0x6e, 0x2f, 0x60, 0xf2, 0x21,
    0x71, 0x22, 0xd0, 0x51, 0x03, 0x84, 0x62, 0xec, 0x16, 0xb9, 0x2c, 0x79,
    0xef, 0x44, 0x8e, 0xae, 0x05, 0x71, 0x62, 0xe3, 0x75, 0x34, 0xa4, 0xea,
    0x82, 0xe3, 0x17, 0x9c, 0x8f, 0x34, 0x82, 0x52, 0xd6, 0xff, 0xda, 0x04,
    0x40, 0x9c, 0xd4, 0xb3, 0x39, 0x10, 0x18, 0xec, 0xbc, 0x42, 0x9b, 0x16,
    0xb6, 0x65, 0x33, 0xf1, 0xa9, 0xf2, 0x85, 0x77, 0x9e, 0xfa, 0x97, 0x29,
    0x7a, 0xa9, 0xc6, 0x16, 0x36, 0x13, 0xdb, 0x0b, 0xe4, 0x72, 0x97, 0xce,
    0xdc, 0xf3, 0xce, 0xcb, 0x22, 0x38, 0x96, 0xc2, 0x24, 0x83, 0xac, 0x73,
    0x61, 0xdd, 0xd0, 0x08, 0xa9, 0x30, 0x68, 0x54, 0xd1, 0xc5, 0xa4, 0x6d,
    0x80, 0x78, 0xad, 0x02, 0xda, 0xbd, 0x44, 0xa2, 0x23, 0x8d, 0x4a, 0xc1,
    0x0b, 0x34, 0x3d, 0xe3, 0xa0, 0x63, 0x9f, 0xcf, 0xed, 0x58, 0x4a, 0xf2,
    0xd0, 0x23, 0x0f, 0xd1, 0x08, 0x35, 0x0f, 0x7d, 0xb9, 0x7a, 0x49, 0x23,
    0x8f, 0xff, 0xb0, 0x46, 0xe3, 0x55, 0xe8, 0xd2, 0x1b, 0x38, 0xdf, 0xcc,
    0x9c, 0x0f, 0x97, 0x3a, 0x6f, 0x22, 0x8d, 0x48, 0x15, 0x7e, 0xa4, 0xa1,
    0x27, 0x01, 0x8e, 0xaf, 0x51, 0x80, 0xf8, 0x6d, 0x7c, 0x72, 0x1a, 0x25,
    0x15, 0x8d, 0x44, 0xa3, 0x86, 0x15, 0x71, 0xe2, 0xb1, 0xf7, 0x9e, 0x5d,
    0x97, 0xbc, 0x99, 0x73, 0xe0, 0xd0, 0x63, 0x97, 0x4e, 0xdc, 0x43, 0x47,
    0x7b, 0x4c, 0xbf, 0xda, 0xc5, 0x2e, 0x82, 0x23, 0x46, 0x2f, 0x3a, 0x3f,
    0x70, 0x9a, 0xd4, 0xcf, 0x9c, 0x4f, 0x35, 0xae, 0x2c, 0x65, 0x63, 0xbf,
    0xa8, 0xe8, 0xc6, 0x35, 0x40, 0xac, 0x28, 0x60, 0x15, 0xb5, 0x50, 0x1a,
    0x98, 0xc5, 0xe4, 0xc1, 0xa1, 0xcd, 0x65, 0x52, 0xae, 0x25, 0x59, 0x98,
    0x25, 0x4d, 0x15, 0xd3, 0x2f, 0x4f, 0xf3, 0x99, 0x1b, 0xc6, 0x19, 0x2e,
    0x2c, 0x7d, 0xfb, 0xff, 0xdf, 0x37, 0x75, 0xc0, 0x23, 0x4f, 0xd6, 0x70,
    0xae, 0x86, 0xc4, 0x6c, 0xa1, 0x73, 0x7a, 0x06, 0x50, 0x04, 0xb1, 0x86,
    0x37, 0x15, 0xf1, 0xd9, 0x19, 0x60, 0x13, 0x26, 0xd1, 0x40, 0x89, 0x28,
    0xd1, 0x08, 0x71, 0x23, 0x66, 0x61, 0x96, 0x68, 0xee, 0x18, 0xc9, 0x1b,
    0xfa, 0x5b, 0xc0, 0x89, 0xe5, 0xd8, 0xad, 0x66, 0x08, 0xbd, 0x16, 0x77,
    0xf4, 0xf1, 0x92, 0x95, 0x6d, 0x03, 0x6d, 0xa9, 0x10, 0x22, 0xa0, 0x7a,
    0x5d, 0x95, 0x5d, 0xff, 0xfa, 0x28, 0xcd, 0x63, 0xdd, 0xe5, 0xbf, 0xec,
    0xc1, 0x53, 0x07, 0x9b, 0x38, 0xd2, 0xa0, 0x06, 0xd9, 0xe6, 0xc2, 0x98,
    0x2f, 0xba, 0x40, 0x96, 0xf7, 0xcf, 0x3b, 0x4f, 0xaa, 0xa1, 0xe8, 0x62,
    0x2c, 0x1f, 0x85, 0x24, 0x9e, 0xab, 0xc7, 0xc0, 0x73, 0x2b, 0x91, 0x5b,
    0x6d, 0x35, 0xfa, 0xe7, 0x53, 0x26, 0xda, 0xe9, 0xa8, 0xfb, 0x89, 0x16,
    0x5a, 0xb0, 0x61, 0x94, 0xf0, 0xac, 0x4f, 0xe1, 0xea, 0x0a, 0xcf, 0xd4,
    0x9e, 0x25, 0x38, 0x25, 0xf9, 0xc4, 0x5f, 0x6d, 0xbc, 0xe4, 0xa3, 0x3d,
    0xff, 0x51, 0x27, 0x5c, 0x68, 0x93, 0x72, 0x33, 0x9d, 0x38, 0xcb, 0x36,
    0xc1, 0xd9, 0xb7, 0x38, 0xff, 0xe6, 0x52, 0xe7, 0x41, 0xc1, 0x9b, 0x1d,
    0xb0, 0xb6, 0xe0, 0x1d, 0xfb, 0x3e, 0x71, 0xc7, 0xfb, 0x16, 0x70, 0x64,
    0x25, 0x62, 0xab, 0xad, 0x46, 0x7f, 0x10, 0xbe, 0x5a, 0x7b, 0xad, 0x1b,
    0xd5, 0xb3, 0x31, 0x6c, 0x5a, 0xd9, 0x8a, 0x8b, 0x4f, 0xf5, 0xba, 0x2a,
    0xb5, 0x17, 0xa7, 0x79, 0xfa, 0x27, 0xad, 0x25, 0x1f, 0xf8, 0x33, 0x3d,
    0x74, 0xa7, 0x4e, 0xd9, 0x1e, 0xcb, 0x9c, 0xcf, 0x2f, 0xcd, 0x36, 0x17,
    0x9d, 0x77, 0x07, 0xf7, 0x2e, 0x88, 0x10, 0xd7, 0x76, 0x31, 0xa7, 0xea,
    0xc4, 0x73, 0xb5, 0x98, 0xec, 0x7c, 0x69, 0x45, 0xac, 0x7a, 0x47, 0x96,
    0xa6, 0xc6, 0x33, 0xa7, 0xfd, 0xdd, 0xa9, 0xb3, 0x85, 0xff, 0x65, 0x0b,
    0xe1, 0x82, 0x26, 0x4d, 0x5d, 0xc2, 0x64, 0x96, 0xe1, 0xf7, 0x57, 0xa8,
    0xbd, 0xf2, 0xcb, 0x25, 0x91, 0xd8, 0xf5, 0xcf, 0x07, 0x50, 0xc5, 0x2a,
    0xed, 0x68, 0x96, 0x74, 0x51, 0x11, 0x0c, 0x1c, 0x0e, 0x13, 0x8d, 0x85,
    0x7a, 0x8b, 0xf3, 0x33, 0x70, 0x4e, 0xc1, 0xb9, 0x59, 0x44, 0xfe, 0x46,
    0xda, 0x61, 0x13, 0xff, 0xa5, 0x1f, 0x93, 0x44, 0xed, 0x87, 0x5f, 0x7f,
    0xe5, 0xf5, 0x17, 0x9e, 0xfa, 0xef, 0xa7, 0x30, 0x8b, 0xcb, 0xaf, 0x05,
    0x57, 0xb2, 0x23, 0x7b, 0x21, 0x6c, 0x7b, 0xfb, 0xfd, 0xa3, 0x0d, 0x7a,
    0x46, 0x53, 0x92, 0x2e, 0x0c, 0xaa, 0x47, 0x93, 0xfa, 0x8c, 0x97, 0x2e,
    0x46, 0xe2, 0xe9, 0x5f, 0x34, 0xa9, 0xd8, 0x15, 0x4c, 0xea, 0x63, 0xe7,
    0xdf, 0x26, 0xcf, 0xbf, 0x75, 0xcc, 0x4b, 0x05, 0x43, 0x3e, 0xee, 0x48,
    0xf6, 0x7e, 0xf7, 0xa4, 0x21, 0xee, 0x78, 0x47, 0xfa, 0xfd, 0xfe, 0x01,
    0xc7, 0x76, 0x98, 0x6f, 0xce, 0xaf, 0x48, 0xea, 0x9d, 0x1c, 0xab, 0x78,
    0xe5, 0xcf, 0xee, 0xdb, 0x26, 0xdd, 0x32, 0x39, 0xcb, 0xa5, 0x67, 0xb2,
    0xb1, 0x4d, 0xaa, 0x29, 0x58, 0x8a, 0xc0, 0xd4, 0x31, 0xc6, 0xa0, 0x6c,
    0x85, 0x31, 0xea, 0xc2, 0xf3, 0xf3, 0x27, 0x74, 0x26, 0xcd, 0x9c, 0xe7,
    0x9c, 0x86, 0x21, 0x05, 0x56, 0x88, 0xc8, 0xbb, 0x98, 0xd4, 0x27, 0xf6,
    0x9b, 0xe8, 0x5f, 0x7d, 0xff, 0x15, 0x52, 0xf3, 0x89, 0xd3, 0xa7, 0x4f,
    0x9f, 0x29, 0x14, 0x0a, 0xd4, 0x1b, 0x75, 0x6e, 0x1d, 0xbf, 0x75, 0x59,
    0x32, 0x57, 0x12, 0x81, 0xf3, 0xb8, 0xcd, 0x3b, 0xf2, 0xc4, 0x2b, 0xe1,
    0x31, 0x4d, 0x2f, 0xf1, 0x70, 0x8b, 0x0a, 0xf0, 0x71, 0x8b, 0x2e, 0xdd,
    0xd4, 0xa7, 0x5c, 0x1c, 0x47, 0x8a, 0x02, 0xb6, 0xc8, 0xc8, 0x67, 0x3b,
    0xb4, 0x8b, 0x79, 0x5e, 0xc9, 0x12, 0xa0, 0xc1, 0x19, 0x8c, 0xf9, 0x11,
    0x97, 0x38, 0x6e, 0x12, 0xe8, 0x00, 0xfd, 0x62, 0x46, 0xbe, 0xbf, 0xd0,
    0x3f, 0x53, 0xb0, 0x0a, 0xd4, 0x9e, 0xaf, 0x21, 0xcd, 0xdb, 0x97, 0x24,
    0xe7, 0x71, 0xc5, 0x11, 0x70, 0xb7, 0x4f, 0x60, 0x6f, 0xb9, 0x8f, 0xc3,
    0x07, 0xbf, 0x74, 0x50, 0x8e, 0x94, 0x77, 0xbb, 0x3b, 0xa6, 0x10, 0xc5,
    0xb1, 0x8c, 0x54, 0xaa, 0x20, 0xf5, 0xc9, 0x91, 0x2d, 0x52, 0xa4, 0x59,
    0x41, 0xb6, 0xc4, 0xf9, 0xb4, 0x0d, 0x96, 0x0b, 0x22, 0x3b, 0x0f, 0x8a,
    0x83, 0x3a, 0xc1, 0xcb, 0xcf, 0x12, 0x87, 0xde, 0x11, 0x60, 0xe7, 0xfc,
    0xfc, 0xfc, 0x19, 0x99, 0x4a, 0xbc, 0x8e, 0x87, 0x8d, 0x8d, 0x8e, 0x34,
    0x77, 0x7f, 0xe1, 0xee, 0xb5, 0x0b, 0xd8, 0xf7, 0xc8, 0x8f, 0x50, 0x77,
    0xdd, 0x4f, 0x79, 0x04, 0xbc, 0x10, 0x6c, 0x01, 0x9f, 0xbf, 0xf6, 0xaa,
    0x3b, 0x45, 0xde, 0x3e, 0x60, 0xdf, 0x50, 0xdd, 0x5c, 0x1d, 0x9b, 0xc2,
    0x37, 0x01, 0xd8, 0x2e, 0x44, 0x59, 0x76, 0xd1, 0xf1, 0x20, 0xbb, 0x44,
    0x59, 0xde, 0xf7, 0xa3, 0x41, 0xf6, 0x89, 0x34, 0x0e, 0x92, 0xfa, 0xb1,
    0x67, 0x88, 0xe7, 0x6a, 0xb1, 0x49, 0xe2, 0x7f, 0xeb, 0x2f, 0xf6, 0x0f,
    0xd0, 0x01, 0x04, 0xd4, 0xe7, 0xea, 0x98, 0xd0, 0xd0, 0x3c, 0xd9, 0x64,
    0xa2, 0x3c, 0xb1, 0xb6, 0xb3, 0x51, 0x61, 0x4b, 0xfe, 0xfd, 0xd9, 0x5f,
    0x53, 0x28, 0x1a, 0xc6, 0x46, 0x2a, 0xe8, 0xa8, 0x8b, 0x93, 0x17, 0x78,
    0x61, 0x56, 0x9d, 0xde, 0x7d, 0xed, 0x87, 0xae, 0x01, 0xbe, 0x89, 0x25,
    0x76, 0xdb, 0x1f, 0xaf, 0x6e, 0x2e, 0x14, 0x4b, 0x88, 0xbc, 0x03, 0xb9,
    0x02, 0xc2, 0x2a, 0x0d, 0x9c, 0x07, 0xce, 0x01, 0xa9, 0x43, 0x37, 0xae,
    0x61, 0x22, 0x9f, 0xb0, 0xed, 0xc5, 0x98, 0xf8, 0x00, 0xf0, 0x9d, 0xfe,
    0x42, 0xff, 0x4c, 0xf3, 0x44, 0x13, 0x91, 0x08, 0xa6, 0x8f, 0x4d, 0x63,
    0x12, 0x03, 0x16, 0x54, 0xed, 0x2a, 0xc1, 0x70, 0xb0, 0xb6, 0x08, 0xcc,
    0xbf, 0x31, 0x8f, 0xc4, 0x06, 0x69, 0xf0, 0xa2, 0xac, 0x6e, 0x37, 0x31,
    0xb4, 0x52, 0x4d, 0x9c, 0x04, 0xc8, 0xbc, 0xc3, 0xf4, 0x09, 0x05, 0x89,
    0xe2, 0x7b, 0x93, 0x57, 0x6d, 0x03, 0xb1, 0x73, 0xb0, 0x0d, 0x2c, 0x01,
    0x25, 0x21, 0x6d, 0x4c, 0x1c, 0x42, 0x56, 0x55, 0x1e, 0xcf, 0x6a, 0x1b,
    0xf3, 0x42, 0xbf, 0xdf, 0x7f, 0x8e, 0x3f, 0x41, 0xfd, 0x48, 0x9d, 0x9a,
    0x57, 0xc3, 0x2d, 0xba, 0x84, 0x69, 0x48, 0x59, 0x95, 0xe9, 0xa6, 0x5d,
    0x46, 0x47, 0x46, 0x69, 0x45, 0x2d, 0x94, 0x50, 0x2b, 0x46, 0x60, 0x1d,
    0xeb, 0x58, 0xc7, 0x3a, 0xd6, 0xb1, 0x26, 0xfc, 0x1f, 0x27, 0xdf, 0x04,
    0xdd, 0x88, 0x10, 0xda, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2e,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x57, 0xb9, 0x2b, 0x37, 0x00, 0x00, 0x06,
    0xb3, 0x49, 0x44, 0x41, 0x54, 0x68, 0x81, 0xed, 0x99, 0x5b, 0x6c, 0x93,
    0x65, 0x18, 0xc7, 0x7f, 0x65, 0xdd, 0x5c, 0x15, 0xb4, 0x95, 0xa9, 0xab,
    0x87, 0x48, 0x75, 0xea, 0x8a, 0x46, 0x05, 0xc1, 0x30, 0xf4, 0x62, 0x9d,
    0x0a, 0x32, 0x15, 0xe2, 0x50, 0x2f, 0x50, 0x13, 0x03, 0x31, 0x26, 0x1e,
    0x2e, 0x70, 0x62, 0x62, 0x26, 0x2a, 0xa9, 0x4b, 0x34, 0x11, 0xaf, 0xbc,
    0x31, 0xd1, 0xc4, 0xc4, 0xc3, 0x8d, 0x48, 0x0c, 0x0e, 0x54, 0x14, 0x50,
    0xe3, 0x06, 0xd1, 0x14, 0xbd, 0xd9, 0xf0, 0x10, 0x3b, 0xe3, 0xa1, 0x72,
    0xd0, 0x76, 0x9b, 0x73, 0x2b, 0x5b, 0xe9, 0xe3, 0xc5, 0xf3, 0x75, 0xfb,
    0xfa, 0x9d, 0xfa, 0x75, 0xa0, 0x86, 0xc4, 0x7f, 0xf2, 0xe6, 0xeb, 0xbe,
    0xbe, 0xf9, 0xfa, 0x7b, 0x9f, 0xef, 0x79, 0x9f, 0xc3, 0xbb, 0x80, 0x88,
    0x70, 0x32, 0x6a, 0xd6, 0x7f, 0x0d, 0x30, 0x53, 0xfd, 0x0f, 0xfe, 0x6f,
    0x2b, 0xe8, 0x74, 0x33, 0x10, 0x08, 0xcc, 0xe4, 0x59, 0x11, 0xe0, 0x42,
    0xe0, 0x1c, 0xe3, 0xb9, 0x67, 0x03, 0x45, 0xe0, 0x0f, 0x60, 0x12, 0x38,
    0x04, 0xfc, 0x0c, 0x0c, 0x1b, 0xf7, 0x8b, 0x33, 0xf9, 0x11, 0x00, 0x11,
    0x71, 0x06, 0xaf, 0x42, 0xa7, 0x02, 0x8b, 0x80, 0x2b, 0x13, 0x10, 0xeb,
    0x84, 0x58, 0x08, 0xa2, 0x71, 0xa8, 0x01, 0xa2, 0x51, 0x38, 0xd6, 0x07,
    0x87, 0xa3, 0x30, 0xf1, 0x0e, 0xfc, 0xb6, 0x15, 0x06, 0xf7, 0xc2, 0x20,
    0x70, 0x00, 0xf8, 0x1a, 0xf8, 0x0b, 0x38, 0x36, 0xa3, 0x45, 0x88, 0x88,
    0x6d, 0xf8, 0x50, 0x1d, 0x70, 0x03, 0xf0, 0x78, 0x3f, 0x7c, 0x2c, 0x90,
    0x13, 0x10, 0x9f, 0xe3, 0xd0, 0x1b, 0xf0, 0x3e, 0xb0, 0x01, 0x58, 0x06,
    0x84, 0x81, 0x53, 0xa8, 0xc2, 0x6d, 0x45, 0x9f, 0x54, 0x35, 0xf8, 0xb9,
    0xc0, 0x23, 0x6f, 0xc0, 0xfb, 0x02, 0x13, 0x55, 0x00, 0x97, 0x8d, 0x31,
    0x18, 0xee, 0x85, 0x1e, 0xe0, 0x61, 0xe0, 0x12, 0x60, 0x36, 0x50, 0x0b,
    0x54, 0xf4, 0xd3, 0x99, 0x80, 0x5f, 0x09, 0x3c, 0x9e, 0x85, 0xd4, 0x4c,
    0x81, 0xad, 0x23, 0x0d, 0x9f, 0x03, 0x8f, 0x01, 0x4b, 0x80, 0x33, 0xf1,
    0x61, 0xfd, 0x6a, 0xc1, 0x97, 0xf4, 0xc0, 0x96, 0x0c, 0xfc, 0x7c, 0xa2,
    0xa0, 0x4d, 0xd6, 0xef, 0x07, 0x9e, 0x06, 0x56, 0xa0, 0x9b, 0x3a, 0xe4,
    0x05, 0x5f, 0x0d, 0xf8, 0x55, 0xbb, 0x60, 0xab, 0x40, 0xf6, 0x44, 0x43,
    0x9b, 0xc6, 0x20, 0xf0, 0x3c, 0xd0, 0x06, 0x34, 0xa2, 0x1b, 0xdf, 0x11,
    0xde, 0x6f, 0x54, 0x39, 0x07, 0xb8, 0x39, 0x0e, 0xd7, 0xa2, 0x21, 0xcf,
    0xae, 0x20, 0x50, 0xf0, 0xf1, 0x24, 0xef, 0xf9, 0xf3, 0x32, 0xb0, 0xec,
    0x5c, 0xf5, 0xf3, 0x31, 0x74, 0x21, 0x45, 0x60, 0x02, 0x87, 0xa8, 0xe3,
    0x67, 0x27, 0x2f, 0xcb, 0xc0, 0xea, 0x28, 0x9c, 0xe7, 0xf4, 0x65, 0x5f,
    0xeb, 0x5a, 0xde, 0xbc, 0xb9, 0x03, 0x82, 0xf5, 0xbe, 0x98, 0x73, 0xcd,
    0xed, 0x3c, 0x7b, 0xef, 0x5a, 0x08, 0x87, 0x6d, 0xdf, 0x45, 0xe1, 0xea,
    0x5e, 0x35, 0xd0, 0x4a, 0x60, 0x2e, 0xba, 0x61, 0x83, 0x38, 0x6c, 0xd8,
    0x4a, 0xe0, 0x97, 0x75, 0xc1, 0xf2, 0x28, 0x2c, 0x76, 0x86, 0x4e, 0xb0,
    0x3b, 0x11, 0x63, 0xc1, 0xa3, 0x49, 0xfa, 0xd6, 0x3f, 0xe4, 0x92, 0xce,
    0x4c, 0xd0, 0x4d, 0x71, 0x36, 0xdf, 0x16, 0xa7, 0xad, 0x75, 0x1d, 0xbb,
    0x37, 0xbf, 0xe0, 0x08, 0xbf, 0x14, 0xae, 0x6b, 0x81, 0x38, 0x3a, 0xc2,
    0xa8, 0xbf, 0xd7, 0xd8, 0x26, 0x7a, 0xf8, 0x78, 0x00, 0x78, 0x40, 0xe0,
    0x7b, 0x27, 0x9f, 0xec, 0xbd, 0xf1, 0x41, 0x49, 0x76, 0x27, 0x25, 0xfd,
    0x45, 0x5a, 0x24, 0x23, 0x22, 0x13, 0x22, 0x63, 0x9b, 0x92, 0x22, 0xc1,
    0x7a, 0x47, 0x1f, 0xce, 0x36, 0xb7, 0x4b, 0xd7, 0x86, 0x2e, 0x49, 0xed,
    0x4c, 0x89, 0x7c, 0x27, 0x22, 0x22, 0x32, 0xb6, 0xa3, 0x47, 0xa4, 0x21,
    0x6c, 0x9b, 0xdb, 0x03, 0xfb, 0x81, 0x97, 0x51, 0xeb, 0x9f, 0x67, 0xc0,
    0x07, 0xcc, 0xcc, 0x5e, 0xe0, 0x17, 0xbd, 0x02, 0xaf, 0x39, 0x42, 0xb7,
    0x26, 0x24, 0xb9, 0x49, 0xa1, 0x33, 0x99, 0x8c, 0x4c, 0x69, 0x42, 0xa4,
    0x7f, 0x53, 0x52, 0x24, 0x68, 0x81, 0x6e, 0x8a, 0x4b, 0xd7, 0x86, 0x4e,
    0x49, 0xed, 0x4c, 0x49, 0x3a, 0x9d, 0x16, 0xb3, 0xfa, 0xb7, 0xf5, 0x88,
    0x84, 0xed, 0xf0, 0xf3, 0x60, 0x07, 0x70, 0x17, 0x30, 0x1f, 0xdd, 0x5b,
    0x41, 0xbf, 0xe0, 0xab, 0x52, 0xf0, 0xb5, 0xb3, 0xf5, 0xe2, 0x92, 0xda,
    0x91, 0x12, 0xf9, 0x49, 0x1c, 0x65, 0xb6, 0x7c, 0x99, 0xa5, 0xd3, 0x0e,
    0x93, 0xb7, 0xf5, 0x3a, 0xbe, 0xa1, 0x2d, 0x6a, 0xf5, 0x17, 0xd1, 0xf8,
    0x7e, 0xbe, 0xd9, 0xea, 0x95, 0xc0, 0x1f, 0x11, 0x18, 0x76, 0x4d, 0x1c,
    0x8b, 0x16, 0x4c, 0xb9, 0x88, 0x4d, 0x86, 0xe5, 0xc7, 0x96, 0xb4, 0x48,
    0x72, 0x63, 0x97, 0xa3, 0xa5, 0x45, 0x44, 0x64, 0x67, 0xca, 0x35, 0x3c,
    0xa6, 0xe0, 0x27, 0x60, 0x0b, 0x70, 0x23, 0x70, 0x19, 0x70, 0x46, 0xc9,
    0xd7, 0xbd, 0xc0, 0xe7, 0xac, 0x81, 0xe7, 0x2a, 0xc6, 0xde, 0x25, 0x2d,
    0x22, 0x87, 0x5d, 0xe0, 0x45, 0x24, 0xdb, 0x97, 0x95, 0xcc, 0xfe, 0x8c,
    0xb3, 0xa5, 0x77, 0xf7, 0xdb, 0x5c, 0xca, 0x32, 0x0a, 0xc0, 0xa7, 0xc0,
    0x2a, 0x60, 0x21, 0x9a, 0x98, 0x6a, 0x4b, 0xe0, 0x6e, 0x51, 0xa5, 0x21,
    0xaa, 0x13, 0xbd, 0xb5, 0x6f, 0x2f, 0x83, 0x2b, 0x97, 0xc2, 0x10, 0x5a,
    0xb8, 0x5a, 0x14, 0x69, 0x89, 0x10, 0x6e, 0x0a, 0x43, 0xcc, 0xf2, 0xc5,
    0x47, 0xfb, 0xa1, 0xed, 0xf2, 0x4a, 0xb1, 0xbf, 0xa6, 0x51, 0xd3, 0x7f,
    0x03, 0x50, 0x8f, 0x16, 0x76, 0x53, 0xd1, 0xc5, 0x0d, 0xfc, 0xb4, 0x16,
    0x38, 0xad, 0x22, 0x38, 0x10, 0xdb, 0xb7, 0x17, 0x3c, 0xe0, 0x43, 0x73,
    0x42, 0xe5, 0x37, 0xf6, 0x0c, 0x40, 0xfb, 0x35, 0x7e, 0x1e, 0x4d, 0xbd,
    0xf2, 0x9d, 0x81, 0x2e, 0xa0, 0x16, 0x1f, 0xe0, 0x75, 0x07, 0x75, 0x85,
    0xfe, 0x54, 0xc1, 0xf2, 0x53, 0xf2, 0x67, 0xe9, 0x29, 0x45, 0x14, 0xf6,
    0x54, 0xf4, 0x1a, 0x44, 0xc1, 0x03, 0xe0, 0x0e, 0x3e, 0xd9, 0xa8, 0xa9,
    0xd6, 0xb7, 0x1a, 0xf3, 0x51, 0xb6, 0xef, 0xdb, 0x6e, 0x78, 0xa1, 0x8b,
    0x46, 0x07, 0xa1, 0xde, 0x5f, 0x86, 0x05, 0xc8, 0xe9, 0xa5, 0x80, 0x72,
    0xd6, 0x18, 0x57, 0x4f, 0xf0, 0x89, 0xaf, 0x20, 0xef, 0xfb, 0x07, 0x9a,
    0xe2, 0x74, 0xaf, 0x88, 0x33, 0xbf, 0x61, 0x3e, 0xb9, 0x23, 0x39, 0xf7,
    0x89, 0xb7, 0xaf, 0x66, 0xb0, 0x3b, 0x59, 0x31, 0xc3, 0x96, 0x94, 0x57,
    0xd8, 0xbc, 0x01, 0x5b, 0xc6, 0xea, 0xf6, 0x88, 0x3f, 0xfa, 0xe0, 0x77,
    0x5f, 0xd0, 0xcd, 0xed, 0x6c, 0xbe, 0x6d, 0x01, 0x1d, 0x89, 0x0e, 0x62,
    0x8d, 0x31, 0x38, 0xcb, 0x7b, 0x7e, 0xec, 0xd1, 0xc7, 0x18, 0x1f, 0xcd,
    0x13, 0x4a, 0x76, 0x43, 0xc1, 0xd3, 0x36, 0xc5, 0x83, 0x0a, 0x3c, 0x04,
    0x88, 0x31, 0xa6, 0xe4, 0x66, 0xf1, 0xa1, 0x3d, 0xf0, 0x2b, 0x30, 0xee,
    0x09, 0x6d, 0xd4, 0x1e, 0x1d, 0x37, 0x75, 0x10, 0x69, 0x8a, 0xd8, 0xa3,
    0x87, 0x8b, 0x42, 0x4f, 0x3c, 0xc9, 0xc0, 0xc6, 0x2e, 0x4f, 0xcb, 0x6f,
    0x57, 0xe0, 0x3f, 0x51, 0x57, 0x29, 0x32, 0xdd, 0x9b, 0x8a, 0x17, 0x78,
    0x11, 0x38, 0x38, 0xae, 0x49, 0xc0, 0x19, 0xba, 0xb9, 0x9d, 0xcd, 0xb7,
    0x77, 0xd0, 0x71, 0xd3, 0x1a, 0x16, 0x36, 0x2d, 0x24, 0x16, 0xb3, 0x50,
    0xef, 0x19, 0x80, 0x35, 0x77, 0xeb, 0x67, 0xeb, 0x86, 0xad, 0x85, 0xf9,
    0x4f, 0x3d, 0xc9, 0xf8, 0xc6, 0xa4, 0x6b, 0x55, 0x79, 0x40, 0x4f, 0x03,
    0x32, 0x06, 0x70, 0xc1, 0xb4, 0x00, 0xb5, 0xbc, 0x47, 0xe6, 0xbc, 0xa6,
    0x07, 0xde, 0x76, 0x4c, 0xf9, 0x1e, 0xb5, 0x87, 0x35, 0x23, 0x66, 0x5a,
    0x13, 0xee, 0x49, 0xca, 0xa5, 0xb6, 0x11, 0x90, 0x46, 0xf8, 0x06, 0x78,
    0x06, 0xb8, 0x13, 0xb8, 0x1e, 0xb8, 0x00, 0x4d, 0xfb, 0x15, 0x53, 0xfe,
    0x6c, 0xa0, 0x53, 0x60, 0xc4, 0x56, 0x47, 0xb4, 0x26, 0xa4, 0x77, 0x6b,
    0xef, 0x54, 0x95, 0x57, 0x31, 0x23, 0x7a, 0x65, 0xd8, 0xf4, 0x98, 0xad,
    0xc8, 0x7a, 0x05, 0x8e, 0x00, 0x5f, 0x02, 0xf7, 0xa1, 0x99, 0x73, 0x11,
    0xda, 0xd0, 0xd4, 0xf9, 0x01, 0x0f, 0x02, 0xcb, 0x8c, 0x6e, 0xde, 0x5e,
    0x21, 0xde, 0xbf, 0x56, 0x64, 0xc4, 0x02, 0xe3, 0x51, 0x7b, 0xa4, 0x9d,
    0xe0, 0xb3, 0x22, 0xd2, 0xd8, 0x58, 0xfe, 0x36, 0x41, 0x16, 0xc0, 0x0f,
    0xc0, 0x4b, 0xc0, 0x3d, 0xc0, 0x72, 0xa6, 0x2b, 0xc4, 0x8a, 0xb5, 0x0a,
    0xa8, 0xff, 0x47, 0x80, 0xf5, 0x02, 0xdf, 0x3a, 0xc1, 0x8c, 0xad, 0xef,
    0x9c, 0x06, 0xa9, 0x5c, 0x7b, 0x94, 0x5b, 0x7e, 0xc4, 0x0e, 0x2d, 0x20,
    0x2f, 0x69, 0xcb, 0xf6, 0x25, 0xb0, 0x0e, 0xb8, 0xc3, 0x70, 0x93, 0x0b,
    0xd1, 0x44, 0xe4, 0xab, 0x3a, 0xc4, 0x78, 0x35, 0x8b, 0xbb, 0xe0, 0x75,
    0x81, 0x82, 0x13, 0x4c, 0xff, 0xfa, 0x4e, 0x91, 0x97, 0x77, 0x79, 0x03,
    0x5b, 0x2d, 0xff, 0x45, 0xda, 0x11, 0x7a, 0x97, 0x1e, 0xd3, 0x0d, 0x00,
    0x1b, 0x0d, 0x6b, 0xaf, 0x40, 0x8f, 0x44, 0x1a, 0x30, 0xa5, 0x36, 0x11,
    0x21, 0x60, 0x01, 0x05, 0xca, 0xce, 0x0e, 0x67, 0xa1, 0x35, 0xcb, 0xf2,
    0x5d, 0x70, 0x5f, 0x1b, 0xdc, 0x62, 0x9b, 0x3c, 0x13, 0x39, 0x34, 0xcb,
    0x39, 0x38, 0xba, 0x10, 0x0e, 0xfd, 0x08, 0xdb, 0x80, 0x14, 0x30, 0x02,
    0x1c, 0x44, 0xc3, 0xf2, 0xef, 0x68, 0x68, 0x2e, 0x96, 0xc0, 0x2b, 0xf5,
    0x9c, 0x45, 0xe0, 0x28, 0xf0, 0xe9, 0x0d, 0xf0, 0xde, 0x76, 0xf8, 0x80,
    0xe3, 0x38, 0xac, 0x9c, 0x92, 0x05, 0x7a, 0x10, 0x46, 0xaf, 0x83, 0xc3,
    0x3f, 0xc2, 0x3e, 0xe0, 0x2b, 0x03, 0x72, 0x08, 0xc8, 0xa2, 0xb1, 0xdc,
    0xd6, 0xe9, 0xfb, 0xe9, 0xf2, 0x0b, 0xe8, 0xe1, 0xe4, 0x8e, 0x5b, 0xa1,
    0xe7, 0x4d, 0xd8, 0x09, 0xfc, 0x76, 0xbc, 0xec, 0x25, 0xbd, 0x03, 0xbf,
    0x2c, 0x85, 0xec, 0x01, 0xf8, 0x04, 0xf8, 0x10, 0x3d, 0x9a, 0x18, 0x42,
    0xad, 0x9c, 0x33, 0xfe, 0xb6, 0x95, 0x65, 0x95, 0x5c, 0xa5, 0xa4, 0x1a,
    0x74, 0x73, 0x44, 0x80, 0x56, 0xa0, 0x65, 0x0b, 0x2c, 0x5e, 0x0d, 0xfe,
    0xea, 0x53, 0x07, 0x0d, 0x00, 0xdd, 0x90, 0x7e, 0x4b, 0xa1, 0xde, 0x45,
    0xe3, 0x76, 0xc9, 0xd2, 0x87, 0x80, 0xc3, 0x06, 0x78, 0x1e, 0x8b, 0xb5,
    0xfd, 0xf8, 0xb8, 0x59, 0x41, 0x13, 0xfc, 0xa5, 0x40, 0x7b, 0x02, 0x2e,
    0x79, 0x15, 0xe6, 0xc5, 0xa0, 0x19, 0xa7, 0x23, 0x04, 0x67, 0x4d, 0xae,
    0x83, 0x5f, 0xb7, 0x42, 0x61, 0x48, 0x61, 0xf7, 0xa0, 0x67, 0xe8, 0x66,
    0x4b, 0x1f, 0x31, 0x3e, 0x8f, 0xa3, 0x99, 0xb3, 0x4c, 0xd5, 0x82, 0x07,
    0x0c, 0xb8, 0x10, 0x5a, 0xdc, 0xcf, 0x05, 0xae, 0x40, 0x8f, 0xcc, 0xa2,
    0x09, 0x98, 0xd3, 0x09, 0xe1, 0x10, 0x84, 0xdb, 0xa0, 0x26, 0x07, 0x73,
    0x23, 0x50, 0xdc, 0x0d, 0xc3, 0xf5, 0x50, 0x78, 0x15, 0xf2, 0x7b, 0x61,
    0xf2, 0x80, 0x16, 0x00, 0x19, 0xe0, 0x33, 0xe3, 0x3a, 0x81, 0xba, 0xe2,
    0xb0, 0x01, 0x9d, 0x45, 0x37, 0x66, 0x1e, 0x97, 0xca, 0xbd, 0x5a, 0xf0,
    0x92, 0x82, 0x68, 0x47, 0x32, 0x1b, 0x3d, 0xb0, 0x89, 0xa0, 0xe1, 0x2a,
    0x0e, 0x5c, 0x8c, 0x9e, 0xfb, 0xd5, 0x1a, 0x0b, 0x0b, 0x1a, 0x10, 0x47,
    0x0d, 0xb0, 0x34, 0x9a, 0x5c, 0x26, 0xd0, 0x05, 0xe4, 0x81, 0x51, 0x63,
    0x4e, 0x0e, 0xb5, 0xf2, 0x5f, 0xc6, 0x7c, 0x9b, 0xa5, 0x8f, 0x17, 0x1c,
    0x74, 0x53, 0xd7, 0xa1, 0xbd, 0xe0, 0x6c, 0xe0, 0x74, 0x60, 0x0e, 0x1a,
    0x3a, 0x4b, 0xfd, 0x61, 0xd0, 0x98, 0x57, 0x0a, 0x00, 0xa5, 0x0a, 0xaf,
    0x60, 0x80, 0xe7, 0x0d, 0xc8, 0x11, 0x34, 0x72, 0x8c, 0x1a, 0xf7, 0x26,
    0xa9, 0x10, 0xb9, 0x8e, 0x07, 0x1c, 0xa6, 0x5d, 0xa7, 0x0e, 0x7d, 0x03,
    0x21, 0xd3, 0xb0, 0xc2, 0x8b, 0x01, 0x63, 0x86, 0x1e, 0x37, 0x8d, 0xa3,
    0x06, 0xf0, 0x31, 0x2c, 0x75, 0xf7, 0x3f, 0x01, 0x6e, 0x5d, 0x40, 0x10,
    0x75, 0x91, 0xd2, 0x28, 0xeb, 0x11, 0x99, 0xfe, 0x87, 0xd5, 0xa4, 0x69,
    0x01, 0xa5, 0xcf, 0xd3, 0xe5, 0xaa, 0x0f, 0x9d, 0x28, 0x70, 0xb3, 0x66,
    0x59, 0x46, 0xc0, 0x04, 0x5e, 0xea, 0x62, 0x6c, 0x4d, 0x41, 0xb5, 0x72,
    0x05, 0x3f, 0x19, 0x74, 0xd2, 0xfe, 0x83, 0xf6, 0xa4, 0x05, 0xff, 0x1b,
    0xfc, 0x4d, 0x8c, 0x18, 0xca, 0x33, 0x2b, 0xcf, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};


frmAgentesVentas::frmAgentesVentas( QWidget* parent, const char* name, WFlags fl,QString claveEmpresaSeleccionada, QString user,logOperaciones *log )
    : QWidget( parent, name, fl )
	,MDKfunciones(claveEmpresaSeleccionada,user,log)
	,MDKnew(claveEmpresaSeleccionada,user,log)
{
   QImage img;
    img.loadFromData( image0_data, sizeof( image0_data ), "PNG" );
    image0 = img;
    img.loadFromData( image1_data, sizeof( image1_data ), "PNG" );
    image1 = img;
    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    if ( !name )
	setName( "frmAgentesVentas" );
    QFont f( font() );
    f.setPointSize( 7 );
    setFont( f ); 
    setIcon( image0 );
    frmAgentesVentasLayout = new QGridLayout( this, 1, 1, 0, 0, "frmAgentesVentasLayout"); 

    frameBotones = new QFrame( this, "frameBotones" );
    frameBotones->setMaximumSize( QSize( 32767, 40 ) );
    frameBotones->setFrameShape( QFrame::StyledPanel );
    frameBotones->setFrameShadow( QFrame::Raised );
    frameBotonesLayout = new QGridLayout( frameBotones, 1, 1, 0, 0, "frameBotonesLayout"); 

    btnGuardar = new QPushButton( frameBotones, "btnGuardar" );
    btnGuardar->setEnabled( TRUE );
    btnGuardar->setIconSet( QIconSet( image1 ) );

    frameBotonesLayout->addWidget( btnGuardar, 0, 0 );

    btnCancelar = new QPushButton( frameBotones, "btnCancelar" );
    btnCancelar->setEnabled( TRUE );
    btnCancelar->setIconSet( QIconSet( image2 ) );

    frameBotonesLayout->addWidget( btnCancelar, 0, 1 );

    frmAgentesVentasLayout->addWidget( frameBotones, 3, 0 );

    progressBar = new QProgressBar( this, "progressBar" );
    progressBar->setMaximumSize( QSize( 32767, 10 ) );
    progressBar->setPercentageVisible( FALSE );

    frmAgentesVentasLayout->addWidget( progressBar, 4, 0 );

    grpBuscar = new QGroupBox( this, "grpBuscar" );
    grpBuscar->setMaximumSize( QSize( 32767, 48 ) );
    grpBuscar->setColumnLayout(0, Qt::Vertical );
    grpBuscar->layout()->setSpacing( 6 );
    grpBuscar->layout()->setMargin( 11 );
    grpBuscarLayout = new QGridLayout( grpBuscar->layout() );
    grpBuscarLayout->setAlignment( Qt::AlignTop );

    textLabel1_2 = new QLabel( grpBuscar, "textLabel1_2" );

    grpBuscarLayout->addWidget( textLabel1_2, 0, 0 );

    textLabel1 = new QLabel( grpBuscar, "textLabel1" );
    textLabel1->setMaximumSize( QSize( 50, 20 ) );

    grpBuscarLayout->addWidget( textLabel1, 0, 2 );

    edtBuscarClave = new QLineEdit( grpBuscar, "edtBuscarClave" );
    edtBuscarClave->setMaximumSize( QSize( 110, 32767 ) );

    grpBuscarLayout->addWidget( edtBuscarClave, 0, 3 );

    edtBuscarNombre = new QLineEdit( grpBuscar, "edtBuscarNombre" );
    edtBuscarNombre->setMinimumSize( QSize( 250, 0 ) );
    edtBuscarNombre->setMaximumSize( QSize( 500, 32767 ) );

    grpBuscarLayout->addWidget( edtBuscarNombre, 0, 1 );

    textLabel1_4 = new QLabel( grpBuscar, "textLabel1_4" );

    grpBuscarLayout->addWidget( textLabel1_4, 0, 4 );

    cboxBuscaNombreEmpresa = new QComboBox( FALSE, grpBuscar, "cboxBuscaNombreEmpresa" );
    cboxBuscaNombreEmpresa->setMinimumSize( QSize( 120, 0 ) );
    cboxBuscaNombreEmpresa->setMaximumSize( QSize( 32767, 20 ) );

    grpBuscarLayout->addWidget( cboxBuscaNombreEmpresa, 0, 5 );

    frmAgentesVentasLayout->addWidget( grpBuscar, 0, 0 );

    lvAgentesVentas = new QListView( this, "lvAgentesVentas" );
    lvAgentesVentas->addColumn( tr( "Clave" ) );
    lvAgentesVentas->addColumn( tr( "Nombre" ) );
    lvAgentesVentas->addColumn( tr( "Direccion" ) );
    lvAgentesVentas->addColumn( tr( "Telefono" ) );
    lvAgentesVentas->addColumn( tr( "Extension" ) );
    lvAgentesVentas->addColumn( tr( "Estatus" ) );
    lvAgentesVentas->addColumn( tr( "Consecutivo" ) );
    lvAgentesVentas->setMinimumSize( QSize( 0, 200 ) );
    lvAgentesVentas->setMaximumSize( QSize( 32767, 32767 ) );
    lvAgentesVentas->setAllColumnsShowFocus( TRUE );
    lvAgentesVentas->setResizeMode( QListView::AllColumns );

    frmAgentesVentasLayout->addWidget( lvAgentesVentas, 1, 0 );

    frameDatos = new QFrame( this, "frameDatos" );
    frameDatos->setMaximumSize( QSize( 32767, 240 ) );
    frameDatos->setFrameShape( QFrame::StyledPanel );
    frameDatos->setFrameShadow( QFrame::Raised );
    frameDatosLayout = new QGridLayout( frameDatos, 1, 1, 5, 1, "frameDatosLayout"); 

    textLabel2_2_2_3 = new QLabel( frameDatos, "textLabel2_2_2_3" );

    frameDatosLayout->addWidget( textLabel2_2_2_3, 1, 5 );

    textLabel2_2 = new QLabel( frameDatos, "textLabel2_2" );

    frameDatosLayout->addWidget( textLabel2_2, 1, 2 );

    textLabel2_2_2_2 = new QLabel( frameDatos, "textLabel2_2_2_2" );

    frameDatosLayout->addWidget( textLabel2_2_2_2, 1, 7 );

    textLabel2_2_2_2_2 = new QLabel( frameDatos, "textLabel2_2_2_2_2" );

    frameDatosLayout->addWidget( textLabel2_2_2_2_2, 1, 9 );

    edtTelefono = new QLineEdit( frameDatos, "edtTelefono" );
    edtTelefono->setEnabled( TRUE );
    edtTelefono->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    frameDatosLayout->addMultiCellWidget( edtTelefono, 1, 1, 3, 4 );

    edtEmail = new QLineEdit( frameDatos, "edtEmail" );
    edtEmail->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    frameDatosLayout->addWidget( edtEmail, 1, 10 );

    edtExt = new QLineEdit( frameDatos, "edtExt" );
    edtExt->setEnabled( TRUE );
    edtExt->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    frameDatosLayout->addWidget( edtExt, 1, 6 );

    edtFax = new QLineEdit( frameDatos, "edtFax" );
    edtFax->setEnabled( TRUE );
    edtFax->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    frameDatosLayout->addWidget( edtFax, 1, 8 );

    edtIniciales = new QLineEdit( frameDatos, "edtIniciales" );

    frameDatosLayout->addWidget( edtIniciales, 1, 1 );

    frameAgenteVentas = new QFrame( frameDatos, "frameAgenteVentas" );
    frameAgenteVentas->setFrameShape( QFrame::NoFrame );
    frameAgenteVentas->setFrameShadow( QFrame::Raised );
    frameAgenteVentasLayout = new QGridLayout( frameAgenteVentas, 1, 1, 5, 7, "frameAgenteVentasLayout"); 

    cboxNombreEmpresa = new QComboBox( FALSE, frameAgenteVentas, "cboxNombreEmpresa" );
    cboxNombreEmpresa->setMinimumSize( QSize( 100, 0 ) );
    cboxNombreEmpresa->setMaximumSize( QSize( 32767, 18 ) );

    frameAgenteVentasLayout->addWidget( cboxNombreEmpresa, 0, 3 );

    textLabel1_3_2 = new QLabel( frameAgenteVentas, "textLabel1_3_2" );
    textLabel1_3_2->setPaletteForegroundColor( QColor( 255, 0, 0 ) );

    frameAgenteVentasLayout->addWidget( textLabel1_3_2, 0, 0 );

    edtClaveEmpresa = new QLineEdit( frameAgenteVentas, "edtClaveEmpresa" );
    edtClaveEmpresa->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)0, 0, 0, edtClaveEmpresa->sizePolicy().hasHeightForWidth() ) );
    edtClaveEmpresa->setMaximumSize( QSize( 70, 32767 ) );

    frameAgenteVentasLayout->addWidget( edtClaveEmpresa, 0, 1 );

    textLabel2_4 = new QLabel( frameAgenteVentas, "textLabel2_4" );
    textLabel2_4->setPaletteForegroundColor( QColor( 255, 0, 0 ) );

    frameAgenteVentasLayout->addWidget( textLabel2_4, 0, 2 );

    textLabel2 = new QLabel( frameAgenteVentas, "textLabel2" );
    textLabel2->setPaletteForegroundColor( QColor( 255, 0, 0 ) );

    frameAgenteVentasLayout->addWidget( textLabel2, 0, 8 );

    edtClave = new QLineEdit( frameAgenteVentas, "edtClave" );
    edtClave->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)0, 0, 0, edtClave->sizePolicy().hasHeightForWidth() ) );
    edtClave->setMinimumSize( QSize( 40, 0 ) );
    edtClave->setMaximumSize( QSize( 40, 32767 ) );

    frameAgenteVentasLayout->addWidget( edtClave, 0, 7 );

    edtNombre = new QLineEdit( frameAgenteVentas, "edtNombre" );
    edtNombre->setEnabled( TRUE );
    edtNombre->setMinimumSize( QSize( 170, 0 ) );
    edtNombre->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    frameAgenteVentasLayout->addWidget( edtNombre, 0, 9 );

    edtClvEmp = new QLineEdit( frameAgenteVentas, "edtClvEmp" );
    edtClvEmp->setMinimumSize( QSize( 40, 0 ) );
    edtClvEmp->setMaximumSize( QSize( 40, 32767 ) );

    frameAgenteVentasLayout->addWidget( edtClvEmp, 0, 5 );

    txtClvEmp = new QLabel( frameAgenteVentas, "txtClvEmp" );
    txtClvEmp->setPaletteForegroundColor( QColor( 255, 0, 0 ) );

    frameAgenteVentasLayout->addWidget( txtClvEmp, 0, 4 );

    textLabel1_3 = new QLabel( frameAgenteVentas, "textLabel1_3" );
    textLabel1_3->setPaletteForegroundColor( QColor( 255, 0, 0 ) );

    frameAgenteVentasLayout->addWidget( textLabel1_3, 0, 6 );

    frameDatosLayout->addMultiCellWidget( frameAgenteVentas, 0, 0, 0, 10 );

    textLabel2_5 = new QLabel( frameDatos, "textLabel2_5" );
    textLabel2_5->setPaletteForegroundColor( QColor( 255, 0, 0 ) );

    frameDatosLayout->addWidget( textLabel2_5, 1, 0 );

    cboxTipo = new QComboBox( FALSE, frameDatos, "cboxTipo" );

    frameDatosLayout->addMultiCellWidget( cboxTipo, 2, 2, 1, 3 );

    tlTipo = new QLabel( frameDatos, "tlTipo" );

    frameDatosLayout->addWidget( tlTipo, 2, 0 );
    spacer1 = new QSpacerItem( 391, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    frameDatosLayout->addMultiCell( spacer1, 2, 2, 4, 10 );

    grpDireccion = new QGroupBox( frameDatos, "grpDireccion" );
    grpDireccion->setColumnLayout(0, Qt::Vertical );
    grpDireccion->layout()->setSpacing( 6 );
    grpDireccion->layout()->setMargin( 11 );
    grpDireccionLayout = new QGridLayout( grpDireccion->layout() );
    grpDireccionLayout->setAlignment( Qt::AlignTop );

    textLabel2_2_2_2_2_2 = new QLabel( grpDireccion, "textLabel2_2_2_2_2_2" );

    grpDireccionLayout->addWidget( textLabel2_2_2_2_2_2, 0, 0 );

    textLabel2_3 = new QLabel( grpDireccion, "textLabel2_3" );

    grpDireccionLayout->addWidget( textLabel2_3, 1, 2 );

    textLabel2_2_2_2_2_2_3 = new QLabel( grpDireccion, "textLabel2_2_2_2_2_2_3" );

    grpDireccionLayout->addWidget( textLabel2_2_2_2_2_2_3, 1, 0 );

    edtCalle = new QLineEdit( grpDireccion, "edtCalle" );
    edtCalle->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    grpDireccionLayout->addMultiCellWidget( edtCalle, 0, 0, 1, 3 );

    textLabel2_2_2_2_2_2_2 = new QLabel( grpDireccion, "textLabel2_2_2_2_2_2_2" );

    grpDireccionLayout->addWidget( textLabel2_2_2_2_2_2_2, 0, 4 );

    edtColonia = new QLineEdit( grpDireccion, "edtColonia" );
    edtColonia->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    grpDireccionLayout->addWidget( edtColonia, 0, 5 );

    edtDelegacion = new QLineEdit( grpDireccion, "edtDelegacion" );
    edtDelegacion->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    grpDireccionLayout->addWidget( edtDelegacion, 1, 1 );

    edtCiudad = new QLineEdit( grpDireccion, "edtCiudad" );

    grpDireccionLayout->addWidget( edtCiudad, 1, 3 );

    textLabel2_2_2_2_2_2_2_2 = new QLabel( grpDireccion, "textLabel2_2_2_2_2_2_2_2" );

    grpDireccionLayout->addWidget( textLabel2_2_2_2_2_2_2_2, 1, 4 );

    edtCP = new QLineEdit( grpDireccion, "edtCP" );
    edtCP->setPaletteForegroundColor( QColor( 0, 0, 0 ) );

    grpDireccionLayout->addWidget( edtCP, 1, 5 );

    frame33 = new QFrame( grpDireccion, "frame33" );
    frame33->setFrameShape( QFrame::NoFrame );
    frame33->setFrameShadow( QFrame::Raised );
    frame33Layout = new QGridLayout( frame33, 1, 1, 5, 6, "frame33Layout"); 

    groupBox21 = new QGroupBox( frame33, "groupBox21" );
    groupBox21->setColumnLayout(0, Qt::Vertical );
    groupBox21->layout()->setSpacing( 1 );
    groupBox21->layout()->setMargin( 5 );
    groupBox21Layout = new QGridLayout( groupBox21->layout() );
    groupBox21Layout->setAlignment( Qt::AlignTop );

    textLabel4 = new QLabel( groupBox21, "textLabel4" );

    groupBox21Layout->addWidget( textLabel4, 0, 0 );

    textLabel5 = new QLabel( groupBox21, "textLabel5" );

    groupBox21Layout->addWidget( textLabel5, 1, 0 );

    edtPaisClave = new QLineEdit( groupBox21, "edtPaisClave" );

    groupBox21Layout->addWidget( edtPaisClave, 0, 1 );

    cboxPaisNombre = new QComboBox( FALSE, groupBox21, "cboxPaisNombre" );
    cboxPaisNombre->setMaximumSize( QSize( 32767, 20 ) );

    groupBox21Layout->addWidget( cboxPaisNombre, 1, 1 );

    frame33Layout->addWidget( groupBox21, 0, 0 );

    groupBox22 = new QGroupBox( frame33, "groupBox22" );
    groupBox22->setColumnLayout(0, Qt::Vertical );
    groupBox22->layout()->setSpacing( 1 );
    groupBox22->layout()->setMargin( 5 );
    groupBox22Layout = new QGridLayout( groupBox22->layout() );
    groupBox22Layout->setAlignment( Qt::AlignTop );

    textLabel7 = new QLabel( groupBox22, "textLabel7" );

    groupBox22Layout->addWidget( textLabel7, 1, 0 );

    cboxEstadoNombre = new QComboBox( FALSE, groupBox22, "cboxEstadoNombre" );
    cboxEstadoNombre->setMaximumSize( QSize( 32767, 20 ) );

    groupBox22Layout->addWidget( cboxEstadoNombre, 1, 1 );

    textLabel6 = new QLabel( groupBox22, "textLabel6" );

    groupBox22Layout->addWidget( textLabel6, 0, 0 );

    edtEstadoClave = new QLineEdit( groupBox22, "edtEstadoClave" );

    groupBox22Layout->addWidget( edtEstadoClave, 0, 1 );

    frame33Layout->addWidget( groupBox22, 0, 1 );

    groupBox23 = new QGroupBox( frame33, "groupBox23" );
    groupBox23->setColumnLayout(0, Qt::Vertical );
    groupBox23->layout()->setSpacing( 1 );
    groupBox23->layout()->setMargin( 5 );
    groupBox23Layout = new QGridLayout( groupBox23->layout() );
    groupBox23Layout->setAlignment( Qt::AlignTop );

    textLabel9 = new QLabel( groupBox23, "textLabel9" );

    groupBox23Layout->addWidget( textLabel9, 1, 0 );

    edtZonaClave = new QLineEdit( groupBox23, "edtZonaClave" );

    groupBox23Layout->addWidget( edtZonaClave, 0, 1 );

    cboxZonaNombre = new QComboBox( FALSE, groupBox23, "cboxZonaNombre" );
    cboxZonaNombre->setMaximumSize( QSize( 32767, 20 ) );

    groupBox23Layout->addWidget( cboxZonaNombre, 1, 1 );

    textLabel8 = new QLabel( groupBox23, "textLabel8" );

    groupBox23Layout->addWidget( textLabel8, 0, 0 );

    frame33Layout->addWidget( groupBox23, 0, 2 );

    grpDireccionLayout->addMultiCellWidget( frame33, 2, 2, 0, 5 );

    frameDatosLayout->addMultiCellWidget( grpDireccion, 3, 3, 0, 10 );

    frmAgentesVentasLayout->addWidget( frameDatos, 2, 0 );
    languageChange();
    resize( QSize(818, 606).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );

    // tab order
    setTabOrder( edtBuscarNombre, edtBuscarClave );
    setTabOrder( edtBuscarClave, cboxBuscaNombreEmpresa );
    setTabOrder( cboxBuscaNombreEmpresa, lvAgentesVentas );
    setTabOrder( lvAgentesVentas, edtClaveEmpresa );
    setTabOrder( edtClaveEmpresa, cboxNombreEmpresa );
    setTabOrder( cboxNombreEmpresa, edtClave );
    setTabOrder( edtClave, edtNombre );
    setTabOrder( edtNombre, edtTelefono );
    setTabOrder( edtTelefono, edtExt );
    setTabOrder( edtExt, edtFax );
    setTabOrder( edtFax, edtEmail );
    setTabOrder( edtEmail, edtCalle );
    setTabOrder( edtCalle, edtColonia );
    setTabOrder( edtColonia, edtDelegacion );
    setTabOrder( edtDelegacion, edtCiudad );
    setTabOrder( edtCiudad, edtCP );
    setTabOrder( edtCP, edtPaisClave );
    setTabOrder( edtPaisClave, cboxPaisNombre );
    setTabOrder( cboxPaisNombre, edtEstadoClave );
    setTabOrder( edtEstadoClave, cboxEstadoNombre );
    setTabOrder( cboxEstadoNombre, edtZonaClave );
    setTabOrder( edtZonaClave, cboxZonaNombre );
    setTabOrder( cboxZonaNombre, btnGuardar );
    setTabOrder( btnGuardar, btnCancelar );

	popmenu_lvAgentesVentas = new QPopupMenu(lvAgentesVentas);
			popIngresarAgenteVentas = new QAction(tr("Nuevo Agente de Ventas"),tr(""),lvAgentesVentas);
			connect(popIngresarAgenteVentas,SIGNAL(activated()),this,SLOT(ingresarAgenteVentas()));
			popIngresarAgenteVentas->addTo(popmenu_lvAgentesVentas);
			
			popModificarAgenteVentas = new QAction(tr("Modificar Agente de Ventas"),tr(""),lvAgentesVentas);
			connect(popModificarAgenteVentas,SIGNAL(activated()),this,SLOT(modificarAgenteVentas()));
			popModificarAgenteVentas->addTo(popmenu_lvAgentesVentas);

			popEliminarAgenteVentas = new QAction(tr("Eliminar  Agente de Ventas"),tr(""),lvAgentesVentas);
			connect(popEliminarAgenteVentas,SIGNAL(activated()),this,SLOT(eliminarAgenteVentas()));
			popEliminarAgenteVentas->addTo(popmenu_lvAgentesVentas);

			popActualizarAgenteVentas = new QAction(tr("Actualizar Lista"),tr(""),lvAgentesVentas);
			connect(popActualizarAgenteVentas,SIGNAL(activated()),this,SLOT(actualizarLvAgentesVentas()));
			popActualizarAgenteVentas->addTo(popmenu_lvAgentesVentas);

			popmenu_lvAgentesVentas->insertSeparator();

			popComisionesAgenteVentas = new QAction(tr("Comision Agente"),tr(""),lvAgentesVentas);
			connect(popComisionesAgenteVentas,SIGNAL(activated()),this,SLOT(comisionAgentes()));
			popComisionesAgenteVentas->addTo(popmenu_lvAgentesVentas);




	connect(lvAgentesVentas,SIGNAL(mouseButtonClicked(int,QListViewItem*,const QPoint&,int)),this,SLOT(lvAgentesVentas_mouseButtonClicked(int,QListViewItem*,const QPoint&,int)));
	connect(lvAgentesVentas,SIGNAL(selectionChanged(QListViewItem*)),this,SLOT(lvAgentesVentas_selectionChanged(QListViewItem*)));

	connect(btnCancelar,SIGNAL(clicked()),this,SLOT(btnCancelar_clicked()));
	connect(btnGuardar,SIGNAL(clicked()),this,SLOT(btnGuardar_clicked()));

	connect(edtNombre,SIGNAL(textChanged(const QString&)),this,SLOT(verificaGuardar()));
	connect(edtClave,SIGNAL(textChanged(const QString&)),this,SLOT(verificaGuardar()));
	connect(edtIniciales,SIGNAL(textChanged(const QString&)),this,SLOT(verificaGuardar()));

	connect(edtBuscarNombre,SIGNAL(textChanged(const QString&)),this,SLOT(edtBuscarNombre_textChanged(const QString&)));
	connect(edtBuscarClave,SIGNAL(textChanged(const QString&)),this,SLOT(edtBuscarClave_textChanged(const QString&)));

	connect(edtBuscarNombre,SIGNAL(returnPressed()),this,SLOT(edtBuscarNombre_returnPressed()));
	connect(edtBuscarClave,SIGNAL(returnPressed()),this,SLOT(edtBuscarClave_returnPressed()));
	
connect(edtEstadoClave,SIGNAL(returnPressed()),this,SLOT(edtEstadoClave_returnPressed()));
connect(cboxEstadoNombre,SIGNAL( activated(const QString&) ),this,SLOT(cboxEstadoNombre_activated(const QString&)) );
connect(edtZonaClave,SIGNAL(returnPressed()),this,SLOT(edtZonaClave_returnPressed()));
connect(cboxZonaNombre,SIGNAL( activated(const QString&) ),this,SLOT(cboxZonaNombre_activated(const QString&)) );
connect(edtPaisClave,SIGNAL(returnPressed()),this,SLOT(edtPaisClave_returnPressed()));
connect(cboxPaisNombre,SIGNAL( activated(const QString&) ),this,SLOT(cboxPaisNombre_activated(const QString&)) );

connect(edtClave,SIGNAL(returnPressed()),this,SLOT(edtClave_returnPressed()));
connect(edtNombre,SIGNAL(returnPressed()),this,SLOT(edtNombre_returnPressed()));
connect(edtIniciales,SIGNAL(returnPressed()),this,SLOT(edtIniciales_returnPressed()));
connect(edtTelefono,SIGNAL(returnPressed()),this,SLOT(edtTelefono_returnPressed()));
connect(edtExt,SIGNAL(returnPressed()),this,SLOT(edtExt_returnPressed()));
connect(edtFax,SIGNAL(returnPressed()),this,SLOT(edtFax_returnPressed()));
connect(edtEmail,SIGNAL(returnPressed()),this,SLOT(edtEmail_returnPressed()));
connect(edtCalle,SIGNAL(returnPressed()),this,SLOT(edtCalle_returnPressed()));
connect(edtColonia,SIGNAL(returnPressed()),this,SLOT(edtColonia_returnPressed()));
connect(edtDelegacion,SIGNAL(returnPressed()),this,SLOT(edtDelegacion_returnPressed()));
connect(edtCiudad,SIGNAL(returnPressed()),this,SLOT(edtCiudad_returnPressed()));
connect(edtCP,SIGNAL(returnPressed()),this,SLOT(edtCP_returnPressed()));


//-------jvc----------
connect(edtClaveEmpresa,SIGNAL(returnPressed()),this,SLOT(edtClaveEmpresa_returnPressed()));
connect(edtClaveEmpresa,SIGNAL(textChanged(const QString&)),this,SLOT(edtClaveEmpresa_textChanged(const QString&)));

connect(cboxNombreEmpresa,SIGNAL( activated(const QString&) ),this,SLOT(cboxNombreEmpresa_activated(const QString&)) );

connect(cboxBuscaNombreEmpresa,SIGNAL( activated(const QString&) ),this,SLOT(cboxBuscaNombreEmpresa_activated(const QString&)) );

connect(lvAgentesVentas,SIGNAL(doubleClicked(QListViewItem*)),this,SLOT(SeleccionaAgente()));//oswaldo 13-12-2010


connect(edtClvEmp,SIGNAL(returnPressed()),this,SLOT(edtClvEmp_returnPressed()));
connect(edtClvEmp,SIGNAL(textChanged(const QString&)),this,SLOT(edtClvEmp_textChanged(const QString&)));

	logOper=log;
	
	
	baseSQL = new accesosql("");
	baseSQL->conecta("mrp","mrp7737","construidea");
	
	claveEmpresa=claveEmpresaSeleccionada;
	usuario=user;
	
	lvAgentesVentas->setSortColumn(-1);
	
	frameBotones->hide();
	habilitarCampos(FALSE);
	lvAgentesVentas->setFocus();
	
	actualizarCboxEstadoNombre();
	actualizarCboxPaisNombre();
	actualizarCboxZonaNombre();
	
	actualizarLvAgentesVentas();
	
	actualizaEmpresa();
	accionGuardar=0;

	oknew();
	mientras();
	nuevoReg=0;
}

bool frmAgentesVentas::mientras()
{
	//qDebug("numero: "+QVariant(QVariant("4291216366").toInt()).toString());
	edtColonia->setText("429121");
	qDebug("numero: "+QVariant(edtColonia->text().toInt()).toString());
	//round_mdk(89.8950);

	//qDebug(QString().sprintf("%.2f",89.896));

// 	//Graba Archivo
// 	QString str="Texto de Prueba...";
// 	QString filename;
// 	filename = "smb://140.70.35.9/PERSONAL/prueba.txt";
// 
// 	qDebug(filename);
// 	QFile f( filename );
// 	if( !f.open( IO_WriteOnly ) )
// 	{
// 		QMessageBox::critical( 0,"ERROR","ERROR AL ABRIR ARCHIVO!!",0,0,0 );
// 		return FALSE;
// 	}
// 	QTextStream t( &f );
// 	t.setEncoding( QTextStream::UnicodeUTF8 );
// 	t << str;
// 	f.close();

	//Escritura de la clave publica en la base
//         QString archIni;
//         QString cadena="";
//         QString cadena2="";
//         QSqlQuery *query_1;
//         archIni=qApp->applicationDirPath().section ( '/',-1 );
//         archIni=qApp->applicationDirPath()+"/00001000000101893791.cer.pem";
// 
//         QString linea;
//         QFile file_conf ( archIni );
//         if ( file_conf.open ( IO_ReadOnly ) )
//         {
//                 QTextStream in ( &file_conf );
//                 in.setEncoding ( QTextStream::UnicodeUTF8 );
//                 cadena=in.read();
// 
//                 baseSQL->execSQL(QString("update folios_cfd set publica='%0'").arg(cadena));
//         }
//         else
//         {
//                 QMessageBox::critical ( 0,"ARCHIVO DE CLAVE PRIVADA","IMPOSIBLE ENCONTRAR EL ARCHIVO QUE CONTIENE LA LLAVE PUBLICA: \n"+archIni,0,0,0 );
//         }


	return TRUE;

}

void frmAgentesVentas::actualizarCboxPaisNombre()
{
	cboxPaisNombre->clear();
	QSqlQuery *query=baseSQL->execSQL("select nombre from paises"  );
	cboxPaisNombre->insertItem("");
	while(query->next())
	{
		cboxPaisNombre->insertItem(query->value(0).toString());
	}

    cboxPaisNombre->setCurrentItem(0);
}

void frmAgentesVentas::actualizarCboxEstadoNombre()
{
	cboxEstadoNombre->clear();
	QSqlQuery *query=baseSQL->execSQL("select nombre from estados"  );
	cboxEstadoNombre->insertItem("");
	while(query->next())
	{
		cboxEstadoNombre->insertItem(query->value(0).toString());
	}

    cboxEstadoNombre->setCurrentItem(0);
}

void frmAgentesVentas::actualizarCboxZonaNombre()
{
	cboxZonaNombre->clear();
	QSqlQuery *query=baseSQL->execSQL("select nombre from zonas"  );
	cboxZonaNombre->insertItem("");
	while(query->next())
	{
		cboxZonaNombre->insertItem(query->value(0).toString());
	}

    cboxZonaNombre->setCurrentItem(0);
}

void frmAgentesVentas::lvAgentesVentas_mouseButtonClicked(int boton,QListViewItem*item,const QPoint&,int)
{
	if(item)
	{
		popmenu_lvAgentesVentas->setItemEnabled(popmenu_lvAgentesVentas->idAt(1),TRUE);
		popmenu_lvAgentesVentas->setItemEnabled(popmenu_lvAgentesVentas->idAt(2),TRUE);
		popmenu_lvAgentesVentas->setItemEnabled(popmenu_lvAgentesVentas->idAt(5),TRUE);
		//seleccionaItem();
	}
	else
	{
		limpiarCampos();
		popmenu_lvAgentesVentas->setItemEnabled(popmenu_lvAgentesVentas->idAt(1),FALSE);
		popmenu_lvAgentesVentas->setItemEnabled(popmenu_lvAgentesVentas->idAt(2),FALSE);
		popmenu_lvAgentesVentas->setItemEnabled(popmenu_lvAgentesVentas->idAt(5),FALSE);
	}

	if(boton==2)
	popmenu_lvAgentesVentas->exec(QCursor::pos());

}

void frmAgentesVentas::ingresarAgenteVentas()
{
logOper->anexaLog( "Mod_AgentesVenta - Nuevo Agente",baseSQL);

accionGuardar=1;
limpiarCampos();
//actualizarCboxEstadoNombre();
//actualizarCboxPaisNombre();
//actualizarCboxZonaNombre();

grpBuscar->setEnabled(FALSE);
lvAgentesVentas->setEnabled(FALSE);
habilitarCampos(TRUE);
btnGuardar->setEnabled(FALSE);
btnCancelar->setEnabled(TRUE);
frameBotones->show();
// edtClaveEmpresa->setFocus();
cboxNombreEmpresa->setCurrentItem(0);
edtClaveEmpresa->setText(claveEmpresa);
edtClaveEmpresa_returnPressed();
edtClvEmp->setFocus();
nuevoReg=1;
cboxTipo->setCurrentItem( 0 );

}

void frmAgentesVentas::modificarAgenteVentas()
{
logOper->anexaLog( "Mod_AgentesVenta - Modificar Agente",baseSQL);

accionGuardar=2;
//actualizarCboxEstadoNombre();
//actualizarCboxPaisNombre();
//actualizarCboxZonaNombre();

grpBuscar->setEnabled(FALSE);
lvAgentesVentas->setEnabled(FALSE);
habilitarCampos(TRUE);
frameBotones->show();
btnGuardar->setEnabled(TRUE);
btnCancelar->setEnabled(TRUE);
edtClave->setEnabled(FALSE);

//Posicionamos los valores de los cboxes
QSqlQuery *query=baseSQL->execSQL(QString("select * from agentesVentas where clave='%0' ").arg(edtClave->text()));
query->next();

cboxPaisNombre->setCurrentText(query->value(8).toString());
cboxEstadoNombre->setCurrentText(query->value(10).toString());
cboxZonaNombre->setCurrentText(query->value(12).toString());

edtClaveEmpresa->setFocus();
edtClaveEmpresa->selectAll();
}

void frmAgentesVentas::eliminarAgenteVentas()
{
	if ( QMessageBox::warning( this, "ELIMINACION DE REGISTRO",tr("Esta seguro de querer eliminar al Agente de Ventas: %1  ").arg(lvAgentesVentas->selectedItem()->text(1)), tr("&No"), tr("&Yes"),QString::null, 0, 1 ) )
	{
		QString itemSeleccionado;
		if(lvAgentesVentas->selectedItem()->itemAbove())
		itemSeleccionado=lvAgentesVentas->selectedItem()->itemAbove()->text(0);
		else
		itemSeleccionado="";

		baseSQL->execSQL(QString( "delete from agentesVentas where clave='%0'  ").arg(lvAgentesVentas->selectedItem()->text(0)) );
		
		limpiarCampos();
		actualizarLvAgentesVentas();
		seleccionarAgenteVentas(itemSeleccionado);
	}
}

void frmAgentesVentas::comisionAgentes()
{
	logOper->anexaLog( "-------------------- Iniciando Modulo Comisiones Agentes --------------------",baseSQL);

	frmComisionesAgente *comision= new frmComisionesAgente(this,0,TRUE,0,logOper);
	comision->clvempresa=edtClaveEmpresa->text();
	comision->clvagente=lvAgentesVentas->selectedItem()->text(0);
	/*int acepto=*/comision->exec();
}

void frmAgentesVentas::verificaGuardar()
{

	if((edtClaveEmpresa->text()!="")&&(cboxNombreEmpresa->currentText()!="")&&(edtNombre->text()!="")&&(edtIniciales->text()!="")&&(edtClave->text()!="")&&(lvAgentesVentas->isEnabled()==FALSE)&&(edtClvEmp->text()!=""))
	btnGuardar->setEnabled(TRUE);
	else
	btnGuardar->setEnabled(FALSE);


	if(edtClave->text()!="")
	{
		if(edtClave->text().length()>2)
		{
		
		edtClave->clear();
		edtClave->setFocus();
		}
		else
		{
		
		}
	}
 


	


}

void frmAgentesVentas::btnGuardar_clicked()
{
	QString itemSeleccionado=edtClave->text();
// 	QSqlQuery *query;

	listaComandos.clear();

	if(accionGuardar==1) //nuevo
	{
		listaComandos.append( QString("insert into agentesVentas (clave,nombre,calle,colonia,delegacion,ciudad,codigoPostal,paisClave,paisNombre,estadoClave,estadoNombre,zonaClave,zonaNombre,tel,ext,fax,email,claveEmpresa,nombreEmpresa,iniciales,claveEmpleado, tipo) values('%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0') ").arg(edtClave->text()).arg(edtNombre->text()).arg(edtCalle->text()).arg(edtColonia->text()).arg(edtDelegacion->text()).arg(edtCiudad->text()).arg(edtCP->text()).arg(edtPaisClave->text()).arg(cboxPaisNombre->currentText()).arg(edtEstadoClave->text()).arg(cboxEstadoNombre->currentText()).arg(edtZonaClave->text()).arg(cboxZonaNombre->currentText()).arg(edtTelefono->text()).arg(edtExt->text()).arg(edtFax->text()).arg(edtEmail->text()).arg(edtClaveEmpresa->text()).arg(cboxNombreEmpresa->currentText()).arg(edtIniciales->text()).arg(edtClvEmp->text()).arg(cboxTipo->currentText()) );

// 		query=baseSQL->execSQL(QString("insert into agentesVentas (clave,nombre,calle,colonia,delegacion,ciudad,codigoPostal,paisClave,paisNombre,estadoClave,estadoNombre,zonaClave,zonaNombre,tel,ext,fax,email,claveEmpresa,nombreEmpresa) values('%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0','%0') ").arg(edtClave->text()).arg(edtNombre->text()).arg(edtCalle->text()).arg(edtColonia->text()).arg(edtDelegacion->text()).arg(edtCiudad->text()).arg(edtCP->text()).arg(edtPaisClave->text()).arg(cboxPaisNombre->currentText()).arg(edtEstadoClave->text()).arg(cboxEstadoNombre->currentText()).arg(edtZonaClave->text()).arg(cboxZonaNombre->currentText()).arg(edtTelefono->text()).arg(edtExt->text()).arg(edtFax->text()).arg(edtEmail->text()).arg(edtClaveEmpresa->text()).arg(cboxNombreEmpresa->currentText()));
	}
	else
	if(accionGuardar==2) //modificacion
	{
		listaComandos.append(QString("update agentesVentas set nombre='%0',calle='%0',colonia='%0',delegacion='%0',ciudad='%0',codigoPostal='%0',paisClave='%0',paisNombre='%0',estadoClave='%0',estadoNombre='%0',zonaClave='%0',zonaNombre='%0',tel='%0',ext='%0',fax='%0',email='%0',claveEmpresa='%0', nombreEmpresa='%0', iniciales='%0',claveEmpleado='%0', tipo='%0' where clave='%0'").arg(edtNombre->text()).arg(edtCalle->text()).arg(edtColonia->text()).arg(edtDelegacion->text()).arg(edtCiudad->text()).arg(edtCP->text()).arg(edtPaisClave->text()).arg(cboxPaisNombre->currentText()).arg(edtEstadoClave->text()).arg(cboxEstadoNombre->currentText()).arg(edtZonaClave->text()).arg(cboxZonaNombre->currentText()).arg(edtTelefono->text()).arg(edtExt->text()).arg(edtFax->text()).arg(edtEmail->text()).arg(edtClaveEmpresa->text()).arg(cboxNombreEmpresa->currentText()).arg(edtIniciales->text()).arg(edtClvEmp->text()).arg( cboxTipo->currentText() ).arg(edtClave->text()));
// 		query=baseSQL->execSQL(QString("update agentesVentas set nombre='%0',calle='%0',colonia='%0',delegacion='%0',ciudad='%0',codigoPostal='%0',paisClave='%0',paisNombre='%0',estadoClave='%0',estadoNombre='%0',zonaClave='%0',zonaNombre='%0',tel='%0',ext='%0',fax='%0',email='%0',claveEmpresa='%0', nombreEmpresa='%0' where clave='%0'").arg(edtNombre->text()).arg(edtCalle->text()).arg(edtColonia->text()).arg(edtDelegacion->text()).arg(edtCiudad->text()).arg(edtCP->text()).arg(edtPaisClave->text()).arg(cboxPaisNombre->currentText()).arg(edtEstadoClave->text()).arg(cboxEstadoNombre->currentText()).arg(edtZonaClave->text()).arg(cboxZonaNombre->currentText()).arg(edtTelefono->text()).arg(edtExt->text()).arg(edtFax->text()).arg(edtEmail->text()).arg(edtClaveEmpresa->text()).arg(cboxNombreEmpresa->currentText()).arg(edtClave->text()));

	}

	if(baseSQL->execSQLTR( listaComandos)==TRUE)
	{
		if(accionGuardar==1)
			logOper->anexaLog( QString("Mod_AgentesVenta - Nuevo Agente Correcto CLAVE:%0").arg(edtClave->text()),baseSQL);
		else
			logOper->anexaLog( QString("Mod_AgentesVenta - Modifica Agente Correcto CLAVE:%0").arg(edtClave->text()),baseSQL);

		btnCancelar_clicked();
		seleccionarAgenteVentas(itemSeleccionado);
	}
	else
	{
		if(accionGuardar==1)
			logOper->anexaLog( QString("Mod_AgentesVenta - Fallo Nuevo Agente CLAVE:%0").arg(edtClave->text()),baseSQL);
		else
			logOper->anexaLog( QString("Mod_AgentesVenta - Fallo Modifica Agente CLAVE:%0").arg(edtClave->text()),baseSQL);

		QMessageBox::warning( 0,"Informacion no Almacenada Correctamente",QString("Informe al Administrador del sistema"),0,0,0);
	}
}

void frmAgentesVentas::btnCancelar_clicked()
{
accionGuardar=0;
claveAgente=0;

limpiarCampos();
habilitarCampos(FALSE);
edtClave->setEnabled(TRUE);
grpBuscar->setEnabled(TRUE);
lvAgentesVentas->setEnabled(TRUE);
frameBotones->hide();
actualizarLvAgentesVentas();
lvAgentesVentas->setFocus();
nuevoReg=0;


}

void frmAgentesVentas::lvAgentesVentas_selectionChanged(QListViewItem*item)
{

	if(item)
	{
		QSqlQuery *query;

		query=baseSQL->execSQL(QString("select * from agentesVentas where clave='%0'").arg(item->text(0)));
		query->next();

		edtClave->setText(query->value(0).toString());
		edtNombre->setText(query->value(1).toString());
		edtCalle->setText(query->value(2).toString());
		edtColonia->setText(query->value(3).toString());
		edtDelegacion->setText(query->value(4).toString());
		edtCiudad->setText(query->value(5).toString());
		edtCP->setText(query->value(6).toString());
		edtPaisClave->setText(query->value(7).toString());
		cboxPaisNombre->setCurrentText(query->value(8).toString());
		edtEstadoClave->setText(query->value(9).toString());
		cboxEstadoNombre->setCurrentText(query->value(10).toString());
		edtZonaClave->setText(query->value(11).toString());
		cboxZonaNombre->setCurrentText(query->value(12).toString());
		edtTelefono->setText(query->value(13).toString());
		edtExt->setText(query->value(14).toString());
		edtFax->setText(query->value(15).toString());
		edtEmail->setText(query->value(16).toString());
		edtClaveEmpresa->setText(query->value(17).toString());
		cboxNombreEmpresa->setCurrentText(query->value(18).toString());
		edtIniciales->setText(query->value(19).toString());
		edtClvEmp->setText(query->value(22).toString());

		claveAgente=query->value(0).toInt();
		edtClave->setEnabled(TRUE);

		for( int i = 0 ; i < cboxTipo->count() ; i++ )
		{
			if( cboxTipo->text( i ) ==  query->value( 24 ).toString() )
				{
				cboxTipo->setCurrentItem( i );
			}
		}
		
	}
	else
	{
		limpiarCampos();
	}


}

void frmAgentesVentas::seleccionarAgenteVentas(QString itemSeleccionado)
{
		if(itemSeleccionado!="")
		{
		QListViewItem *item=lvAgentesVentas->findItem ( itemSeleccionado, 0, ExactMatch);
		lvAgentesVentas->ensureItemVisible(item);
		lvAgentesVentas->setSelected(item,TRUE);
		}
}

void frmAgentesVentas::actualizarAgentesVentas()
{
actualizarLvAgentesVentas();
}

void frmAgentesVentas::habilitarCampos(bool variable)// *
{
		edtClaveEmpresa->setReadOnly(!variable);
		cboxNombreEmpresa->setEnabled(variable);
		edtClave->setReadOnly(!variable);
		edtNombre->setReadOnly(!variable);
		edtIniciales->setReadOnly(!variable);
		edtCalle->setReadOnly(!variable);
		edtColonia->setReadOnly(!variable);
		edtDelegacion->setReadOnly(!variable);
		edtCiudad->setReadOnly(!variable);
		edtCP->setReadOnly(!variable);
		edtPaisClave->setReadOnly(!variable);
		cboxPaisNombre->setEnabled(variable);
		edtEstadoClave->setReadOnly(!variable);
		cboxEstadoNombre->setEnabled(variable);
		edtZonaClave->setReadOnly(!variable);
		cboxZonaNombre->setEnabled(variable);
		edtTelefono->setReadOnly(!variable);
		edtExt->setReadOnly(!variable);
		edtFax->setReadOnly(!variable);
		edtEmail->setReadOnly(!variable);
		edtClvEmp->setReadOnly(!variable);
}

void frmAgentesVentas::limpiarCampos()// *
{
		edtClaveEmpresa->clear();
		cboxNombreEmpresa->setCurrentItem(0);
		edtClave->clear();
		edtNombre->clear();
		edtIniciales->clear();
		edtCalle->clear();
		edtColonia->clear();
		edtDelegacion->clear();
		edtCiudad->clear();
		edtCP->clear();
		edtPaisClave->clear();
		cboxPaisNombre->setCurrentItem(0);
		edtEstadoClave->clear();
		cboxEstadoNombre->setCurrentItem(0);
		edtZonaClave->clear();
		cboxZonaNombre->setCurrentItem(0);
		edtTelefono->clear();
		edtExt->clear();
		edtFax->clear();
		edtEmail->clear();
		edtClvEmp->clear();
}

void frmAgentesVentas::actualizarLvAgentesVentas()
{
	if(lvAgentesVentas->isEnabled()==TRUE)
	{
			QString filtro;
			int consecutivo =0;
			
			if((edtBuscarNombre->text()!="")&&(cboxBuscaNombreEmpresa->currentText()!="TODAS"))
			filtro=QString("where nombre like '%%0%' and nombreEmpresa='%0'").arg(edtBuscarNombre->text()).arg(cboxBuscaNombreEmpresa->currentText());
			else
			if((edtBuscarNombre->text()!="")&&(cboxBuscaNombreEmpresa->currentText()=="TODAS"))
			filtro=QString("where nombre like '%%0%' ").arg(edtBuscarNombre->text());
			else
			if((edtBuscarClave->text()!="")&&(cboxBuscaNombreEmpresa->currentText()!="TODAS"))
			filtro=QString("where clave like '%%0%' and nombreEmpresa='%0'").arg(edtBuscarClave->text()).arg(cboxBuscaNombreEmpresa->currentText());
			else
			if((edtBuscarClave->text()!="")&&(cboxBuscaNombreEmpresa->currentText()=="TODAS"))
			filtro=QString("where clave like '%%0%' ").arg(edtBuscarClave->text());
			else
 			if((cboxBuscaNombreEmpresa->currentText()!="TODAS")&&(edtBuscarClave->text()=="")&&(edtBuscarNombre->text()==""))
 			filtro=QString("where nombreEmpresa='%0'").arg(cboxBuscaNombreEmpresa->currentText());
 			else
			filtro="";

			QListViewItem *item;
			lvAgentesVentas->clear();
			QSqlQuery *query;
			QSqlQuery *queryClvEmpl;

			progressBar->setProgress(0);
			query=baseSQL->execSQL("select count(*) from agentesVentas");
			query->next();
			progressBar->setTotalSteps(query->value(0).toInt());
		
			query=baseSQL->execSQL(QString("select clave,nombre,calle,ciudad,tel,ext,nombreEmpresa,claveEmpleado from agentesVentas %0 order by clave" ).arg(filtro));

			

			while(query->next())
			{
// 				item = new QListViewItem(lvAgentesVentas, query->value(0).toString(), query->value(1).toString(), query->value(2).toString() + "  " + query->value(3).toString(), query->value(4).toString(), query->value(5).toString(),query->value(6).toString());
				
				item = new QListViewItem(lvAgentesVentas,""); 
				item->setText ( 0,	query->value ( 0 ).toString() );
				item->setText ( 1,	query->value ( 1 ).toString() );
				item->setText ( 2,	query->value ( 2 ).toString() + "  " + query->value ( 3 ).toString());
				item->setText ( 3,	query->value ( 4 ).toString());
				item->setText ( 4,	query->value ( 5 ).toString() );
				
				queryClvEmpl=baseSQL->execSQL(QString("select estado from empleados  where clave='%0' " ).arg(query->value ( 7 ).toString()));

				if(( queryClvEmpl->next() ) && ( queryClvEmpl->isValid() ) && ( queryClvEmpl->isActive() ))
				{
				item->setText ( 5,	queryClvEmpl->value ( 0 ).toString() );
				}
				else
				{}

				consecutivo++;
				item->setText(6,QVariant(consecutivo).toString().rightJustify(6,'0',FALSE) );
				
		
		
			progressBar->setProgress(progressBar->progress()+1);
		
			}

			progressBar->setProgress(0);

	}



	cboxTipo->clear();
	QSqlQuery *query;
	query=baseSQL->execSQL( " select tipo from tiposAgentesVentas order by orden " );
	if (query->isActive())
	{
		while( (query->next()) && (query->isValid()) )
		{
			cboxTipo->insertItem( query->value(0).toString() );
		}
	}
	cboxTipo->setCurrentItem(0);

}

void frmAgentesVentas::edtBuscarNombre_textChanged(const QString&texto)
{
	if(texto!="")
	{
		edtBuscarClave->setText("");
	}
}

void frmAgentesVentas::edtBuscarClave_textChanged(const QString&texto)
{
	if(texto!="")
	{
		edtBuscarNombre->setText("");
	}
}

void frmAgentesVentas::edtBuscarNombre_returnPressed()
{
actualizarLvAgentesVentas();
}

void frmAgentesVentas::edtBuscarClave_returnPressed()
{
actualizarLvAgentesVentas();
}

//Verificaciones y autocompletar
void frmAgentesVentas::edtPaisClave_returnPressed()
{
	QSqlQuery *query;
	query=baseSQL->execSQL(QString("select clave,nombre from paises where clave='%0' ").arg(edtPaisClave->text()));
	if((query->next())&&(query->isValid()))
	{
	    cboxPaisNombre->setCurrentText(query->value(1).toString());
	    edtEstadoClave->setFocus();
	}
	else
	{
	    edtPaisClave->setFocus();
	    edtPaisClave->setText("NO EXISTE");
	    edtPaisClave->selectAll();
	}
}

void frmAgentesVentas::cboxPaisNombre_activated(const QString&seleccion)
{
	QSqlQuery *query;
	query=baseSQL->execSQL(QString("select clave,nombre from paises where nombre='%0' ").arg(seleccion));
	if((query->next())&&(query->isValid()))
	{
	    edtPaisClave->setText(query->value(0).toString());
	    edtEstadoClave->setFocus();
	}
	else
	{
	    cboxPaisNombre->setFocus();
	    edtPaisClave->setText("NO EXISTE");
	    edtPaisClave->selectAll();
	}
}

void frmAgentesVentas::edtEstadoClave_returnPressed()
{
	QSqlQuery *query;
	query=baseSQL->execSQL(QString("select clave,nombre from estados where clave='%0' ").arg(edtEstadoClave->text()));
	if((query->next())&&(query->isValid()))
	{
	    cboxEstadoNombre->setCurrentText(query->value(1).toString());
	    edtZonaClave->setFocus();
	}
	else
	{
	    edtEstadoClave->setFocus();
	    edtEstadoClave->setText("NO EXISTE");
	    edtEstadoClave->selectAll();
	}
}

void frmAgentesVentas::cboxEstadoNombre_activated(const QString&seleccion)
{
	QSqlQuery *query;
	query=baseSQL->execSQL(QString("select clave,nombre from estados where nombre='%0' ").arg(seleccion));
	if((query->next())&&(query->isValid()))
	{
	    edtEstadoClave->setText(query->value(0).toString());
	    edtZonaClave->setFocus();
	}
	else
	{
	    cboxEstadoNombre->setFocus();
	    edtEstadoClave->setText("NO EXISTE");
	    edtEstadoClave->selectAll();
	}
}

void frmAgentesVentas::edtZonaClave_returnPressed()
{
	QSqlQuery *query;
	query=baseSQL->execSQL(QString("select clave,nombre from zonas where clave='%0' ").arg(edtZonaClave->text()));
	if((query->next())&&(query->isValid()))
	{
	    cboxZonaNombre->setCurrentText(query->value(1).toString());
	    btnGuardar->setFocus();
	}
	else
	{
	    edtZonaClave->setFocus();
	    edtZonaClave->setText("NO EXISTE");
	    edtZonaClave->selectAll();
	}
}

void frmAgentesVentas::cboxZonaNombre_activated(const QString&seleccion)
{
	QSqlQuery *query;
	query=baseSQL->execSQL(QString("select clave,nombre from zonas where nombre='%0' ").arg(seleccion));
	if((query->next())&&(query->isValid()))
	{
	    edtZonaClave->setText(query->value(0).toString());
	    btnGuardar->setFocus();
	}
	else
	{
	    cboxZonaNombre->setFocus();
	    edtZonaClave->setText("NO EXISTE");
	    edtZonaClave->selectAll();
	}
}

void frmAgentesVentas::edtClave_returnPressed()
{
QSqlQuery *query;
query=baseSQL->execSQL(QString("select clave,nombre from agentesVentas where clave='%0'" ).arg(edtClave->text()));

if (( query->next() ) && ( query->isValid() ) && ( query->isActive() ))
{
	
QMessageBox::information(this, tr("VERIFICAR"),tr(QString(" La clave que deseas asignar a este Agente ya fue asignada anteriormente\nal Agente con nombre   %0").arg(query->value(1).toString())));

edtClave->clear();
edtClave->setFocus();

}
else
{
edtNombre->setFocus();
}
	
}

void frmAgentesVentas::edtNombre_returnPressed()
{
	edtIniciales->setFocus();
}

void frmAgentesVentas::edtIniciales_returnPressed()
{
	edtTelefono->setFocus();
}

void frmAgentesVentas::edtTelefono_returnPressed()
{
	edtExt->setFocus();
}

void frmAgentesVentas::edtExt_returnPressed()
{
	edtFax->setFocus();
}

void frmAgentesVentas::edtFax_returnPressed()
{
	edtEmail->setFocus();
}

void frmAgentesVentas::edtEmail_returnPressed()
{
	edtCalle->setFocus();
}

void frmAgentesVentas::edtCalle_returnPressed()
{
	edtColonia->setFocus();
}

void frmAgentesVentas::edtColonia_returnPressed()
{
	edtDelegacion->setFocus();
}

void frmAgentesVentas::edtDelegacion_returnPressed()
{
	edtCiudad->setFocus();
}

void frmAgentesVentas::edtCiudad_returnPressed()
{
	edtCP->setFocus();
}

void frmAgentesVentas::edtCP_returnPressed()
{
	edtPaisClave->setFocus();
}

//--------JVC----------
void frmAgentesVentas::actualizaEmpresa()
{
	cboxNombreEmpresa->clear();
	cboxBuscaNombreEmpresa->clear();
	cboxNombreEmpresa->insertItem( tr( "" ) );
    	cboxBuscaNombreEmpresa->insertItem( tr( "TODAS" ) );
 	QSqlQuery *query=baseSQL->execSQL("select nombre from empresas"  );
 	while(query->next())
 	{
 		cboxNombreEmpresa->insertItem(query->value(0).toString());
		cboxBuscaNombreEmpresa->insertItem(query->value(0).toString());
 	}

}

void frmAgentesVentas::edtClaveEmpresa_returnPressed()
{
	QSqlQuery *query;
	query=baseSQL->execSQL(QString("select nombre from empresas where clave='%0' ").arg(edtClaveEmpresa->text()));
	if((query->isActive())&&(query->next())&&(query->isValid()))
	{
	    cboxNombreEmpresa->setCurrentText(query->value(0).toString());
    	    	if(accionGuardar==1)
			edtClave->setFocus();
		else
		if(accionGuardar==2){
			edtNombre->selectAll();
			edtNombre->setFocus();
		}
	}
	else
	{
	    edtClaveEmpresa->setFocus();
	    edtClaveEmpresa->setText("NO EXISTE");
	    edtClaveEmpresa->selectAll();
	    cboxNombreEmpresa->setCurrentItem(0);
	}
	verificaGuardar();
}

void frmAgentesVentas::edtClaveEmpresa_textChanged(const QString&)
{
	//edtClaveEmpresa_returnPressed();
//	cboxNombreEmpresa->setCurrentItem(0);
	verificaGuardar();
}

void frmAgentesVentas::cboxNombreEmpresa_activated(const QString&)
{
	QSqlQuery *query=baseSQL->execSQL(QString("select clave from empresas where nombre='%0' ").arg(cboxNombreEmpresa->currentText()));
	
	if((query->isActive())&&(query->next())&&(query->isValid()))
	{
		edtClaveEmpresa->setText(query->value(0).toString());

		if(accionGuardar==1)
			edtClave->setFocus();
		else
		if(accionGuardar==2){
			edtNombre->selectAll();
			edtNombre->setFocus();
		}
	}
	else
	{
	    edtClaveEmpresa->setText("NO EXISTE");
	    edtClaveEmpresa->selectAll();
	    cboxNombreEmpresa->setFocus();
	    cboxNombreEmpresa->setCurrentItem(0);
	}
	verificaGuardar();
}

void frmAgentesVentas::cboxBuscaNombreEmpresa_activated(const QString&)
{
	actualizarAgentesVentas();
}

void frmAgentesVentas::SeleccionaAgente()
{
qDebug(QVariant(vieneModuloAgeProy).toString()+"<-------vieneModuloAgeProy");

	if (vieneModuloAgeProy==1)//viene del modulo agenteProyeccion para capturar proyeccion
	{
qDebug("si Paso modulo1");
	edtAgenteVta->setText(lvAgentesVentas->selectedItem()->text(0));
	close();
	}
	else if(vieneModuloAgeProy==2)//viene del modulo agenteProyeccion para la busqueda del agente
	{
qDebug("si Paso modulo2");
	edtAgenteVta->setText(lvAgentesVentas->selectedItem()->text(1));
	close();
	}
	else
	{

	}
}

void frmAgentesVentas::edtClvEmp_returnPressed()
{
if(edtClvEmp->text()=="")
{
	frmBuscaEmp *buscaEmpleado=new frmBuscaEmp(0,0,0,edtClvEmp);
	buscaEmpleado->clv=edtClvEmp;
	buscaEmpleado->modulo=1;
	buscaEmpleado->show();
	
}
else
{
}
}

void frmAgentesVentas::edtClvEmp_textChanged(const QString&)
{
if (edtClvEmp->text()!="")
	{
		if(nuevoReg==1)
		{
		QSqlQuery *query;
		query=baseSQL->execSQL(QString("select nombre from empleados where clave='%0'" ).arg(edtClvEmp->text()));
	
		if (( query->next() ) && ( query->isValid() ) && ( query->isActive() ))
		{
		edtNombre->setText(query->value(0).toString());
		}
		
		}
		else
		{
		}
	}
else
	{
	if(nuevoReg==1)
	{
	edtNombre->clear();
	}
	}
verificaGuardar();
}

frmAgentesVentas::~frmAgentesVentas()
{
	logOper->anexaLog( "-------------------- Cerrando Modulo Agentes de Ventas --------------------",baseSQL);

	baseSQL->desconecta();
	delete baseSQL;
}

void frmAgentesVentas::languageChange()
{
    setCaption( tr( "Agentes de Ventas" ) );
    btnGuardar->setText( tr( "&Guardar" ) );
    btnGuardar->setAccel( QKeySequence( tr( "Alt+G" ) ) );
    btnCancelar->setText( tr( "  &Cancelar" ) );
    btnCancelar->setAccel( QKeySequence( tr( "Alt+C" ) ) );
    grpBuscar->setTitle( tr( "Buscar" ) );
    textLabel1_2->setText( tr( "Nombre :" ) );
    textLabel1->setText( tr( "Clave :" ) );
    textLabel1_4->setText( tr( "Nombre Empresa" ) );
    cboxBuscaNombreEmpresa->clear();
    cboxBuscaNombreEmpresa->insertItem( tr( "TODAS" ) );
    lvAgentesVentas->header()->setLabel( 0, tr( "Clave" ) );
    lvAgentesVentas->header()->setLabel( 1, tr( "Nombre" ) );
    lvAgentesVentas->header()->setLabel( 2, tr( "Direccion" ) );
    lvAgentesVentas->header()->setLabel( 3, tr( "Telefono" ) );
    lvAgentesVentas->header()->setLabel( 4, tr( "Extension" ) );
    lvAgentesVentas->header()->setLabel( 5, tr( "Estatus" ) );
    lvAgentesVentas->header()->setLabel( 6, tr( "Consecutivo" ) );
    textLabel2_2_2_3->setText( tr( "Ext." ) );
    textLabel2_2->setText( tr( "Telefono :" ) );
    textLabel2_2_2_2->setText( tr( "Fax :" ) );
    textLabel2_2_2_2_2->setText( tr( "E-mail :" ) );
    textLabel1_3_2->setText( tr( "Cve. Emp:" ) );
    textLabel2_4->setText( tr( "Nom. Emp :" ) );
    textLabel2->setText( tr( "Nombre :" ) );
    txtClvEmp->setText( tr( "Clv Empledado" ) );
    textLabel1_3->setText( tr( "Clv Agente :" ) );
    textLabel2_5->setText( tr( "Iniciales:" ) );
    tlTipo->setText( tr( "Tipo:" ) );
    grpDireccion->setTitle( tr( "Direccion" ) );
    textLabel2_2_2_2_2_2->setText( tr( "Calle y Numero :" ) );
    textLabel2_3->setText( tr( "Ciudad :" ) );
    textLabel2_2_2_2_2_2_3->setText( tr( "Del. o Municipio :" ) );
    textLabel2_2_2_2_2_2_2->setText( tr( "Colonia :" ) );
    textLabel2_2_2_2_2_2_2_2->setText( tr( "C.P." ) );
    groupBox21->setTitle( tr( "Pais" ) );
    textLabel4->setText( tr( "Clave" ) );
    textLabel5->setText( tr( "Nombre" ) );
    groupBox22->setTitle( tr( "Estado" ) );
    textLabel7->setText( tr( "Nombre" ) );
    textLabel6->setText( tr( "Clave" ) );
    groupBox23->setTitle( tr( "Zona" ) );
    textLabel9->setText( tr( "Nombre" ) );
    textLabel8->setText( tr( "Clave" ) );

}

